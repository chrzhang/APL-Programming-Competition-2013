:Namespace Contest2013
⍝ === VARIABLES ===

AboutMe←,⊂'Hi, my name is Christopher Zhang, and I''ve just finished my first year of undergraduate Computer Science at Binghamton University. Discovering the joy of code this past year has truly been magical for me. It''s really quite astonishing; exactly one year ago, I barely knew how to program and was set on majoring in bioengineering! The languages I''ve studied are Python, Java, assembly, and just the tip of the iceberg that is C. I have worked on Android application development and making games. While working with these powerhouse languages, it was annoying to follow more than one step to carry out universal tools of the trade like the common for loop. Things like this were generally same across the languages I''ve seen. It was refreshing to look at the clear, deceptively simple, and undeniably snappy nature of APL. I truly love the challenge of programming and embarking on this contest not only gave me confidence but allowed me to put to use the many work habits I have acquired: writing code out on paper, brainstorming, using forums for help, and finally reading and doing fun exercises (thank you, Bernard Legrand).'

FilePath←'C:\Users\Chris\Dropbox\Computer Science\APL\'

Reaction←,⊂'The contest scared me at first but I found myself enjoying the challenge more than any other code-related project so far. This was because it was not mathematically complex but required thought, visualization, and planning. It also required no small amount of clever re-thinking and revision. This type of contest is really enjoyable because time is less of a looming stranglehold and the problems covered such a broad range of topics that I could switch back and forth from them without confusing or losing my thoughts. I loved how the problems showed APL as not only relevant but incredibly powerful in many forms of modern thought. I did have some problems when my examples did not match up to the output for the QuackerTracker and final hard question of modeling an island. When I emailed and the corrections were made, I was still unable to get exactly matching answers. I''d like the judges to review the comments for my code. I did not know how to define a duck in its entirety and tested countlessly (ignoring gray pixels, or brown ones, or black ones, repeatedly). It proved to be a fruitless exercise and if there were clearer instructions, it would have saved me a lot of time. Overall, I really enjoyed spending my summer doing this contest.  Please keep holding this contest! I am sure many will enjoy their first steps into the world of working with Kenneth Iverson''s brainchild and even using it as a tool for their daily needs. Thank you!'


⍝ === End of variables definition ===

⎕IO ⎕ML ⎕WX←1 0 3

:Namespace Problems

 ⎕IO  ←0 ⍝ *** DO NOT change these system variables here, only after the variables definition 

⍝ === VARIABLES ===

B←0.011

Background←8

BinImage←80 101⍴

Cell←7839

Cells←(2993+⍳5),(3093+⍳8),(3193+⍳10),(3293+⍳11),(3393+⍳13),(3494+⍳13),(3595+⍳13),(3696+⍳13),(3797+⍳13),(3899+⍳11),(4000+⍳11),(4102+⍳9),4206 4207 4208 4584 4585 4586 4630 4631 4632,(4683+⍳6),(4731+⍳5),4784 4785 4786 4788 4789,(4831+⍳7),4884 4885 4886 4888 4889 4890 4931 4932 4933,(4936+⍳4),(4983+⍳9),4994 4995 4996,(5032+⍳10),(5085+⍳8),(5094+⍳4),(5133+⍳4),(5138+⍳5),5145,(5166+⍳5),(5186+⍳13),5229,(5233+⍳15),(5266+⍳7),(5287+⍳13),5329 5330 5331,(5334+⍳14),(5366+⍳8),(5389+⍳12),(5430+⍳17),(5467+⍳4),5473 5474,(5489+⍳13),(5531+⍳5),(5537+⍳11),(5567+⍳10),(5590+⍳13),(5631+⍳19),(5664+⍳14),(5690+⍳14),(5732+⍳18),(5765+⍳14),(5791+⍳14),(5833+⍳17),(5867+⍳13),(5882+⍳4),(5892+⍳14),(5934+⍳18),(5969+⍳18),(5994+⍳12),(6035+⍳18),(6069+⍳20),(6096+⍳9),(6136+⍳19),(6171+⍳19),6199 6200 6201,(6237+⍳20),(6273+⍳18),(6319+⍳6),(6338+⍳20),(6374+⍳18),(6419+⍳8),(6439+⍳20),(6475+⍳18),(6518+⍳12),(6541+⍳19),(6575+⍳19),(6619+⍳13),(6642+⍳19),(6675+⍳20),(6719+⍳14),(6744+⍳17),(6776+⍳20),(6819+⍳16),(6847+⍳14),(6877+⍳20),(6920+⍳16),(6949+⍳12),(6978+⍳19),(7021+⍳16),(7055+⍳5),(7079+⍳18),(7122+⍳16),(7180+⍳18),(7223+⍳16),(7282+⍳16),(7324+⍳16),(7384+⍳12),(7426+⍳14),(7486+⍳9),(7528+⍳13),(7629+⍳12),(7731+⍳10),7834+⍳6

CellsWithLeftNeighbs←(2994+⍳4),(3094+⍳7),(3194+⍳9),(3294+⍳10),(3394+⍳12),(3495+⍳12),(3596+⍳12),(3697+⍳12),(3798+⍳12),(3900+⍳10),(4001+⍳10),(4103+⍳8),4207 4208 4585 4586 4631 4632,(4684+⍳5),(4732+⍳4),4785 4786 4789,(4832+⍳6),4885 4886 4889 4890 4932 4933 4937 4938 4939,(4984+⍳8),4995 4996,(5033+⍳9),(5086+⍳7),5095 5096 5097 5134 5135 5136,(5139+⍳4),(5167+⍳4),(5187+⍳12),(5234+⍳14),(5267+⍳6),(5288+⍳12),5330 5331,(5335+⍳13),(5367+⍳7),(5390+⍳11),(5431+⍳16),5468 5469 5470 5474,(5490+⍳12),(5532+⍳4),(5538+⍳10),(5568+⍳9),(5591+⍳12),(5632+⍳18),(5665+⍳13),(5691+⍳13),(5733+⍳17),(5766+⍳13),(5792+⍳13),(5834+⍳16),(5868+⍳12),5883 5884 5885,(5893+⍳13),(5935+⍳17),(5970+⍳17),(5995+⍳11),(6036+⍳17),(6070+⍳19),(6097+⍳8),(6137+⍳18),(6172+⍳18),6200 6201,(6238+⍳19),(6274+⍳17),(6320+⍳5),(6339+⍳19),(6375+⍳17),(6420+⍳7),(6440+⍳19),(6476+⍳17),(6519+⍳11),(6542+⍳18),(6576+⍳18),(6620+⍳12),(6643+⍳18),(6676+⍳19),(6720+⍳13),(6745+⍳16),(6777+⍳19),(6820+⍳15),(6848+⍳13),(6878+⍳19),(6921+⍳15),(6950+⍳11),(6979+⍳18),(7022+⍳15),(7056+⍳4),(7080+⍳17),(7123+⍳15),(7181+⍳17),(7224+⍳15),(7283+⍳15),(7325+⍳15),(7385+⍳11),(7427+⍳13),(7487+⍳8),(7529+⍳12),(7630+⍳11),(7732+⍳9),7835+⍳5

CellsWithNoTopLeftNeighbs←(2993-100×⎕io-⍳5),4584 4630 4683 4831 4884 4888 4931 4983 4994 5094 5145 5166 5229 5233 5266 5329 5366 5489 5567 5631 5664 5690 5882 6069 6319 6419 6518 6575 6675 6719 6819

CellsWithOnlyLeftNeighbs←(2994+⍳4),3099 3100 3202 3405 4585 4586 4631 4632 4684 4688 4734 4735 4837 4939 4984 4988 4995 4996 5035 5036 5041,(5167+⍳4),5194 5238 5244 5245 5247 5272 5331 5433 5434 5572 5573 5576 5637 5649 5665 5666 5667 5883 5884 5885 5951 5981 5982 6088 6154 6256,(6320+⍳5),6426 6519 6528 6529 6631 6834

CellsWithOnlyTopNeighbs←(3494-101×⎕io-⍳4),3899 4000 4102 4206 4731 4784 4788 4936 5032 5085 5133 5138 5186 5287 5334 5389 5430 5467 5473 5531 5537 5590 5732 5765 5791 5833 5867 5892 5934 5969 5994 6035 6096 6136 6171 6199 6237 6273 6338 6374 6439 6475 6541 6619 6642 6744 6776 6847 6877 6920 6949 6978 7021 7055 7079 7122 7180 7223 7282 7324 7384 7426 7486 7528 7629 7731 7834

CellsWithTopAndLeftNeighbs←(3094+⍳5),(3194+⍳8),(3294+⍳10),(3394+⍳11),(3495+⍳12),(3596+⍳12),(3697+⍳12),(3798+⍳12),(3900+⍳10),(4001+⍳10),(4103+⍳8),4207 4208 4685 4686 4687 4732 4733 4785 4786 4789,(4832+⍳5),4885 4886 4889 4890 4932 4933 4937 4938 4985 4986 4987 4989 4990 4991 5033 5034,(5037+⍳4),(5086+⍳7),5095 5096 5097 5134 5135 5136,(5139+⍳4),(5187+⍳7),(5195+⍳4),(5234+⍳4),(5239+⍳5),5246,(5267+⍳5),(5288+⍳12),5330,(5335+⍳13),(5367+⍳7),(5390+⍳11),5431 5432,(5435+⍳12),5468 5469 5470 5474,(5490+⍳12),(5532+⍳4),(5538+⍳10),(5568+⍳4),5574 5575,(5591+⍳12),(5632+⍳5),(5638+⍳11),(5668+⍳10),(5691+⍳13),(5733+⍳17),(5766+⍳13),(5792+⍳13),(5834+⍳16),(5868+⍳12),(5893+⍳13),(5935+⍳16),(5970+⍳11),(5983+⍳4),(5995+⍳11),(6036+⍳17),(6070+⍳18),(6097+⍳8),(6137+⍳17),(6172+⍳18),6200 6201,(6238+⍳18),(6274+⍳17),(6339+⍳19),(6375+⍳17),(6420+⍳6),(6440+⍳19),(6476+⍳17),(6520+⍳8),(6542+⍳18),(6576+⍳18),(6620+⍳11),(6643+⍳18),(6676+⍳19),(6720+⍳13),(6745+⍳16),(6777+⍳19),(6820+⍳14),(6848+⍳13),(6878+⍳19),(6921+⍳15),(6950+⍳11),(6979+⍳18),(7022+⍳15),(7056+⍳4),(7080+⍳17),(7123+⍳15),(7181+⍳17),(7224+⍳15),(7283+⍳15),(7325+⍳15),(7385+⍳11),(7427+⍳13),(7487+⍳8),(7529+⍳12),(7630+⍳11),(7732+⍳9),7835+⍳5

CellsWithTopNeighbs←(3094+⍳5),(3194+⍳8),(3294+⍳10),(3394+⍳11),(3494+⍳13),(3595+⍳13),(3696+⍳13),(3797+⍳13),(3899+⍳11),(4000+⍳11),(4102+⍳9),4206 4207 4208 4685 4686 4687 4731 4732 4733 4784 4785 4786 4788 4789,(4832+⍳5),4885 4886 4889 4890 4932 4933 4936 4937 4938 4985 4986 4987 4989 4990 4991 5032 5033 5034,(5037+⍳4),(5085+⍳8),5095 5096 5097,(5133+⍳4),(5138+⍳5),(5186+⍳8),(5195+⍳4),(5234+⍳4),(5239+⍳5),5246,(5267+⍳5),(5287+⍳13),5330,(5334+⍳14),(5367+⍳7),(5389+⍳12),5430 5431 5432,(5435+⍳12),(5467+⍳4),5473 5474,(5490+⍳12),(5531+⍳5),(5537+⍳11),(5568+⍳4),5574 5575,(5590+⍳13),(5632+⍳5),(5638+⍳11),(5668+⍳10),(5691+⍳13),(5732+⍳18),(5765+⍳14),(5791+⍳14),(5833+⍳17),(5867+⍳13),(5892+⍳14),(5934+⍳17),(5969+⍳12),(5983+⍳4),(5994+⍳12),(6035+⍳18),(6070+⍳18),(6096+⍳9),(6136+⍳18),(6171+⍳19),6199 6200 6201,(6237+⍳19),(6273+⍳18),(6338+⍳20),(6374+⍳18),(6420+⍳6),(6439+⍳20),(6475+⍳18),(6520+⍳8),(6541+⍳19),(6576+⍳18),(6619+⍳12),(6642+⍳19),(6676+⍳19),(6720+⍳13),(6744+⍳17),(6776+⍳20),(6820+⍳14),(6847+⍳14),(6877+⍳20),(6920+⍳16),(6949+⍳12),(6978+⍳19),(7021+⍳16),(7055+⍳5),(7079+⍳18),(7122+⍳16),(7180+⍳18),(7223+⍳16),(7282+⍳16),(7324+⍳16),(7384+⍳12),(7426+⍳14),(7486+⍳9),(7528+⍳13),(7629+⍳12),(7731+⍳10),7834+⍳6

ClustersVec←((2993+⍳5),(3093+⍳8),(3193+⍳10),(3293+⍳11),(3393+⍳13),(3494+⍳13),(3595+⍳13),(3696+⍳13),(3797+⍳13),(3899+⍳11),(4000+⍳11),(4102+⍳9),4206 4207 4208) (4584 4585 4586,(4683+⍳6),4784 4785 4786 4788 4789 4884 4885 4886 4888 4889 4890,(4983+⍳9),4994 4995 4996,(5085+⍳8),(5094+⍳4),(5186+⍳13),(5287+⍳13),(5389+⍳12),(5489+⍳13),(5590+⍳13),(5690+⍳14),(5791+⍳14),(5892+⍳14),(5994+⍳12),(6096+⍳9),6199 6200 6201) (4630 4631 4632,(4731+⍳5),(4831+⍳7),4931 4932 4933,(4936+⍳4),(5032+⍳10),(5133+⍳4),(5138+⍳5),5145 5229,(5233+⍳15),5329 5330 5331,(5334+⍳14),(5430+⍳17),(5531+⍳5),(5537+⍳11),(5631+⍳19),(5732+⍳18),(5833+⍳17),(5934+⍳18),(6035+⍳18),(6136+⍳19),(6237+⍳20),(6338+⍳20),(6439+⍳20),(6541+⍳19),(6642+⍳19),(6744+⍳17),(6847+⍳14),(6949+⍳12),7055+⍳5) ((5166+⍳5),(5266+⍳7),(5366+⍳8),(5467+⍳4),5473 5474,(5567+⍳10),(5664+⍳14),(5765+⍳14),(5867+⍳13),(5882+⍳4),(5969+⍳18),(6069+⍳20),(6171+⍳19),(6273+⍳18),(6374+⍳18),(6475+⍳18),(6575+⍳19),(6675+⍳20),(6776+⍳20),(6877+⍳20),(6978+⍳19),(7079+⍳18),(7180+⍳18),(7282+⍳16),(7384+⍳12),7486+⍳9) ((6319+⍳6),(6419+⍳8),(6518+⍳12),(6619+⍳13),(6719+⍳14),(6819+⍳16),(6920+⍳16),(7021+⍳16),(7122+⍳16),(7223+⍳16),(7324+⍳16),(7426+⍳14),(7528+⍳13),(7629+⍳12),(7731+⍳10),7834+⍳6)

ExpandedMatrix←7 16⍴0 1,(18/0),1,(17/0),1,(17/0),1,(17/0),1,(17/0),1,(17/0),1 0

GlobN←30

Globs←(133/1),6 6 6 7 7 7,(6/6),(5/7),(5/6),(7/7),(6/6),(7/7),(12/6),(10/7),(12/6),(10/7),(5/17),(13/6),(16/7),(7/17),(13/6),(17/7),(8/17),(12/6),(17/7),(6/17),(13/6),(16/7),(10/17),(13/6),(19/7),(14/17),(14/6),(18/7),(14/17),(14/6),(17/7),(17/17),(14/6),(18/7),(18/17),(12/6),(18/7),(20/17),(9/6),(19/7),(19/17),6 6 6,(20/7),(18/17),(6/30),(20/7),(18/17),(8/30),(20/7),(18/17),(12/30),(19/7),(19/17),(13/30),(19/7),(20/17),(14/30),(17/7),(20/17),(16/30),(14/7),(20/17),(16/30),(12/7),(19/17),(16/30),(5/7),(18/17),(16/30),(18/17),(16/30),(16/17),(16/30),(12/17),(14/30),(9/17),41/30

Image←80 100⍴(2963/8),(5/11),(94/8),(8/11),(91/8),(10/11),(89/8),(11/11),(88/8),(13/11),(87/8),(13/11),(87/8),(13/11),(87/8),(13/11),(87/8),(13/11),(88/8),(11/11),(89/8),(11/11),(90/8),(9/11),(93/8),7 3 3 3 7,(370/8),11 11 11,(43/8),11 11 11,(49/8),(6/11),(42/8),(5/11),(47/8),11 11 0 8 11 11,(41/8),(7/11),(45/8),11 11 11 8 11 11 11,(40/8),11 11 11 7 8,(4/11),(42/8),3,(8/11),8 8 11 11 11,(35/8),11 11 11 3 15 0,(4/11),(42/8),1 3 3,(5/11),8,(4/11),(35/8),(4/11),8 15,(4/11),8 8 11,(19/8),(5/11),(15/8),1 1 1,(10/11),(30/8),11 8 8 8,(15/11),(17/8),(7/11),(14/8),3 3,(11/11),(29/8),11 11 11 8 8,(12/11),3 3,(17/8),(8/11),(15/8),(12/11),(29/8),(5/11),15,(10/11),3,(19/8),11 11 11 3 8 8 11 11,(14/8),(13/11),(29/8),(5/11),8,(8/11),3 3 1,(18/8),(4/11),0 15,(4/11),(13/8),(13/11),(28/8),(15/11),3 3 1 3,(13/8),(8/11),15,(5/11),(12/8),(14/11),(28/8),(17/11),3 7,(13/8),3,(13/11),(12/8),(14/11),(28/8),(17/11),(16/8),3 3,(11/11),8 8,(4/11),(6/8),(14/11),(28/8),(18/11),(16/8),1 1 3 3,(14/11),(7/8),(12/11),(29/8),(18/11),(15/8),3 1 1 1 3,(15/11),(6/8),7,(8/11),3,(31/8),(19/11),(14/8),7 3 3 3,(16/11),(8/8),7 3 3 3 7,(34/8),(20/11),(15/8),(18/11),(28/8),(6/11),(13/8),(20/11),(15/8),(18/11),(27/8),(8/11),(12/8),(20/11),(15/8),(18/11),(25/8),(12/11),(11/8),(19/11),(14/8),(19/11),(25/8),(13/11),(10/8),(19/11),(13/8),(20/11),(24/8),(14/11),(11/8),(17/11),(14/8),(20/11),(23/8),(16/11),(12/8),(14/11),7,(14/8),(20/11),(23/8),(16/11),(13/8),(7/11),(5/3),7,(15/8),(19/11),(24/8),(16/11),(17/8),7,(5/3),7 7,(16/8),(18/11),(25/8),(16/11),(41/8),(18/11),(25/8),(16/11),(42/8),(16/11),(26/8),(16/11),(42/8),7,(11/11),3 7,(29/8),(14/11),(44/8),7,(9/11),7,(32/8),(13/11),(87/8),(12/11),(89/8),(8/11),3 3,(92/8),(4/11),3 3,238/8

IndicesMat←80 101⍴⍳5),(95/0),(3093+⍳8),(92/0),(3193+⍳10),(90/0),(3293+⍳11),(89/0),(3393+⍳13),(88/0),(3494+⍳13),(88/0),(3595+⍳13),(88/0),(3696+⍳13),(88/0),(3797+⍳13),(89/0),(3899+⍳11),(90/0),(4000+⍳11),(91/0),(4102+⍳9),(95/0),4206 4207 4208,(375/0),4584 4585 4586,(43/0),4630 4631 4632,(50/0),(4683+⍳6),(42/0),(4731+⍳5),(48/0),4784 4785 4786 0 4788 4789,(41/0),(4831+⍳7),(46/0),4884 4885 4886 0 4888 4889 4890,(40/0),4931 4932 4933 0 0,(4936+⍳4),(43/0),(4983+⍳9),0 0 4994 4995 4996,(35/0),(5032+⍳10),(43/0),(5085+⍳8),0,(5094+⍳4),(35/0),(5133+⍳4),0,(5138+⍳5),0 0 5145,(20/0),(5166+⍳5),(15/0),(5186+⍳13),(30/0),5229 0 0 0,(5233+⍳15),(18/0),(5266+⍳7),(14/0),(5287+⍳13),(29/0),5329 5330 5331 0 0,(5334+⍳14),(18/0),(5366+⍳8),(15/0),(5389+⍳12),(29/0),(5430+⍳17),(20/0),(5467+⍳4),0 0 5473 5474,(14/0),(5489+⍳13),(29/0),(5531+⍳5),0,(5537+⍳11),(19/0),(5567+⍳10),(13/0),(5590+⍳13),(28/0),(5631+⍳19),(14/0),(5664+⍳14),(12/0),(5690+⍳14),(28/0),(5732+⍳18),(15/0),(5765+⍳14),(12/0),(5791+⍳14),(28/0),(5833+⍳17),(17/0),(5867+⍳13),0 0,(5882+⍳4),(6/0),(5892+⍳14),(28/0),(5934+⍳18),(17/0),(5969+⍳18),(7/0),(5994+⍳12),(29/0),(6035+⍳18),(16/0),(6069+⍳20),(7/0),(6096+⍳9),(31/0),(6136+⍳19),(16/0),(6171+⍳19),(9/0),6199 6200 6201,(35/0),(6237+⍳20),(16/0),(6273+⍳18),(28/0),(6319+⍳6),(13/0),(6338+⍳20),(16/0),(6374+⍳18),(27/0),(6419+⍳8),(12/0),(6439+⍳20),(16/0),(6475+⍳18),(25/0),(6518+⍳12),(11/0),(6541+⍳19),(15/0),(6575+⍳19),(25/0),(6619+⍳13),(10/0),(6642+⍳19),(14/0),(6675+⍳20),(24/0),(6719+⍳14),(11/0),(6744+⍳17),(15/0),(6776+⍳20),(23/0),(6819+⍳16),(12/0),(6847+⍳14),(16/0),(6877+⍳20),(23/0),(6920+⍳16),(13/0),(6949+⍳12),(17/0),(6978+⍳19),(24/0),(7021+⍳16),(18/0),(7055+⍳5),(19/0),(7079+⍳18),(25/0),(7122+⍳16),(42/0),(7180+⍳18),(25/0),(7223+⍳16),(43/0),(7282+⍳16),(26/0),(7324+⍳16),(44/0),(7384+⍳12),(30/0),(7426+⍳14),(46/0),(7486+⍳9),(33/0),(7528+⍳13),(88/0),(7629+⍳12),(90/0),(7731+⍳10),(93/0),(7834+⍳6),241/0

Island10←2 10 10⍴0 1 2 0 1 0 1 2 1 2 2 1 0 1 1 2 2 2 0 0 2 0 1 2 2 1 0 2 2 2 1 0 1 2 0 1 2 1 0 0 1 0 1 2 2 0 2 1 1 0 2 1 0 0 2 0 1 1 0 2 1 1 2 0 2 2 2 0 0 2 2 1,(4/2),0 0 1 1 1 2 1 2 0 1 1 1 0 0 0 1 2 0 1 1 2 2 1 2 0 0 0 1,(34/0),1,(12/0),1,(31/0),1,16/0

Island100←2 100 100⍴2 3 2 0 2 0 3 3 0 2 2 0 2 0 3 0 1 0 0 1,(3-¯1×⎕io-⍳4),2 3 1 0 1 0 3 0 1 2 0 0 1 0 1 0 3 3 0 2 1 1 2 3 0 1 2 0 0 3 3 2 0 3 0 0 3 3 2 2 0 3 0 0 0 3 1 2 2 1 3 0 1 0 3 2 3 3,(4/2),0 1 0 1 3 0 0 1 0 0 1 1 2 1 1 2 1 3 1 1 2 2 0 1 1 2 2 1 3 0 0 2 1 3 3 1 3 2 2 0 1 3 3 0 0 0 1 2 1 1 3 3 1 0 2 2 0 0 0 3 2 1 2 0 2 2 0 3 3 2 2 0 0 1 1 2 3 1 1 3 0 0 3 3 3 2 2 1 0 2 3 2 3 0 0 2 2 1 0 0 0 0 0 3 1 0 0 1 1 3 3 1 2 1 3 2 2 1 0 0 3 0 0 2 0 2 0 1 0 2 3 2 0 0 2 3 1 2 3 2 3 1 2 3 3 2 2 0 1 2 2,(5/1),3 0 1 3 3 1 0 0 3,(4/1),2 0 2 1 1 3 1 2 1 2 3 1 1 0 3 3 0 1 0 2 3 2 0,(4/3),0 3 0 3 2 1 3 0 2 2 1 0 2 0 1 3 0 1,(+⍳4),1 2 0 1 3 2 3 2 2 2 0 3 1 3 0 3 0 1 3 2 0 2 2 0 1 1 0 3 3 3 1 1 0 0 2 3 0 2 1 2 1 0 1 1 0 1 3 0 1 0 0 3 1 1 0 2 3 0 2 1 0 1 0 3 1,(+⍳4),0 2 0 3 3 3 0 0 2 1 1 2 1 3 0 1 3 2 2 0 3,(+⍳4),1 3 1 3 0 3 3 0 0 1 0,(4/2),1 2 1 0 0 3 1 3 1 3 3 0 2 0 2 1 3 3 2 2 1 3 3 3 2 1 2 1 2 2 1 3 2 2 1 1 3 0 0 3 2 1 1 3 0 2 2 1 0 2 1 1 0 2 1 1 1 3 1 3 0 0 1 2 2 3 1 1 1 3 0 1 1 1 2 0 0 1 1 0 2 3 0 1 0 2 2,(4/3),0 3 0 0 1 0 0 1 3 2 0 3 2 3 2 3 2 0 0 1 1 0 2 1 3 3 0 3 3 0 3 3 0 2 0 0 2 1 0 2 3 2 0 3 0 3 3 2 1 3 0 3 3 3 0 2 1 3 3 1 0 1 1 2 2 3 2 2 1 2 3 2 0 2 0 2 1 3 0 0 2 3 2 1 2 1 3 1 0 0 0 3 3 1 3 3 2 3 2 0 3 2,(6/3),2 3 1 3 0 2 1 3 1 2 2 3 0 2 1 2 3 0 3 1 2 2 2 1 3 2 1 2 3 3 1 1 2 0 0 2 1 0 3 3 3 1 2 0 1 1 2 3 3 0 2 3 0 1 2 1 1 0 1,(3-¯1×⎕io-⍳4),1 0 1 1 2 0 1 0 3 3 2 1 1 3,(4/0),1 3 2 3 3 1 3 0 0 2 3 3 3 0 1 3 2 3 0 1 2 2 3 0 2 2 1 3 0 2 2 3,(5/1),3 1 0 3 2 0 3 0 1,(3-¯1×⎕io-⍳4),3 1 2 0 2 3 3 3 0 0 3 1 0 3 3 0 2 1 1 3 3 1 1 0 0 1 3 3 0 0 2 1 2 2 1 1 2 0 3 2 1 3 2 1 1 3 0 3 2 0 3 3 2 3 1 3 3 1 3 1 2 3 3 3 2 3 1 3 3 3 0 3 1 1 2 3 3 3 2 2 0 2 1 1 0 1 3 3 0 1 3 2 3 3 3 1 1 3 0 0 0 3 0 3 2 2 2 0 3 1 1 0 3 0 0 3 1 1 3 0 1 1 2 2 1 0 3 2 0 3 0 2 3 0 2 3 0 3 0 0 2 2 0 2 1 1 0 0 2 2 2 1 2 1 2 0 2 2 3 3 3 2 1 0 3 0 2 1 3 0 3 3 1 2 3 0 0 3 3 0 3 3 0 1 2 0 1 3 2 2 1 0 1 2 3 3 3 1 2 1 2 2 0 2 2 1 2 2 3 1 2 1 1 2 1 2 0 0 1 2 1 1 1 0 2 3 3 2 1 2 1 1 2 2 0 3 1 1,(3-¯1×⎕io-⍳4),1 3 2 2 3 0 0 2 0 1 3 3,(+⍳4),0 2 0 2 3 2 2 2 0 3 3 1,(3-¯1×⎕io-⍳4),1 3 1 3 0 1 1 0 0 1 3 0 3 3 2 0 2 0 2 1 0 2 2 2 3 2,(3-¯1×⎕io-⍳4),2,(4/0),2 0 1 0 3 0 1 0 1 1 2 1 1 0 1 3 0 1 3 0 2 1 3 3 1 3 2 2 2 1 1 3 1 0 2 2 2 1 1 2 0 1 3 0 3 3 3 2 2 2 1 0 2 1 0 3 3 1 2 1 3 3 3 2 3 3 0 2 3 3 1 0 3 3 2 0 0 2 2 3 0 2 3 0 0 3 0 2 1 1 3 1 2 1 1 3 0 0 3 2 2 3 3 2 1 3 0 1 3 1 3 3 0 0 0 1 1 3 0 2 2 3 3 2 1 2 0 3 3 1 3 0 1 2 1 1 0 0 0 1 1 0 0 1 3 1 2 0 3 2 0 0 1 0 0 0 1 2 0 0 3 3 1 2 0 1 2 1 0 0 1 0 2 1 1 0 3 1 1 0 2 2 0 0 2 2 1 3 1 3 1 3 0 1 3 3 0 2 1 1 0 0 1 2 1 3 0 2 3 0 2 0 3 3 2 2 1 0 3 1 1 1 2 3 2 3 2 0 1 1 1 3 3 2 0 1 0 2 3 0 3 3 1 1 2 0 1 2,(+⍳4),1 3 1 2 1 3 2 3 2 1 2 0 0 1 1 2 2 2 1 1 3 1 2 1 0 1 3 2 2 3,(4/2),1 1 0 3 2 1 1 3 3 0 1 1 0 1 0 3 3 2 0 2 0 2 1 0 3 3 1 1 0 0 3 3 2 3 2 1,(4/2),0 0 0 3 3 3 2 2 1 3 2 0 3 0 3 0 3 0 0 3 2 3 0 2 3 0 0 2 0 1 0 0 1 3 2 3 0 3 3 1 1 3 3 3 0 2 3 0 0 1 1 3 1 0 2 0 1 3 0 3 1 0 1 1 0 3 0,(5/1),2 1,(3-¯1×⎕io-⍳4),2 3 1 3 0 1 0 1 0 0 0 3 3 2 1 3 3 0 2 3 2 2 2 0 3 2 0 1 2,(4/0),3 2 2 2 3 3 0 2 0 0 0 2 1 0 3 0 1 3 3 2 3 1 3 0 1 0 3 0 0 2 1 1 2 0,(4/2),1 0 2 1 1 2 1 0 0 1 2 0 3 0,(+⍳4),1 3 0 1,(+⍳4),1 0 0 2 3 1 0 1 1 1 0 0 3 3 2 3 2 2 0 2 1 3 2 3 2 1 1 2 1 0 0 1 2 0 0 0 2 1 1 0 3 1 0 2 3 3 1 0 2 1 2 2 2 3 2 0 2 2 1 3 1 1 2 0 0 2 2 3 3 1 2 3 0 3 3 1 2 1 0 1 3 1 0 2 1 0 1 2 1 1 1 2 3 2 2 2 1 1 2 3 0 3 1 3 3 1 1 3 0 3 0 3 1 0 3 3 1 0 1 0,(4/1),3 2 0 2 0 2 1 1 3 1 0 3 2 1 3 0 3 1 2 0 2 3 3 0 3 3 0 3 1 3 0 2 3 2 0 1 3 1 2 0 3 0 0 1 2 2 3 0 2 2,(+⍳4),0 2 3 2 0 2 3 2 3 0 3 0 0 1 2 2 0 0 1 3 3 2 0 2 2 0 1 2 0 0 3 3 2 2 0 2 2 0 2 1 0 3 3 0 1 1 0 0 2 0 1 1 3 0 3 2 1 1 2 1 0 1 1 1,(4/3),1 2 0 3 0 0 2 2 2 0 0,(5/1),3 2 0 1 3 3 0 3 0 1 0 1 2 0 2 3 1 1 3 2 0 3 2 0 2 1 0 0 3 2 3 1 1 3 3 0 1 3 0 3 2 2 3 3 0 2 0 3 3 0 0 2 1 1 2 2 2 1 3 0 0 0 2 3 3 0 3 3 2 0 2 2 2 0 3 2 0 1 1 2 3,(4/2),0 1 0 3 2,(4/3),2 3 2 2 2 3 2 3 1 0 0 1 0 1 0 2 1 1 1 3 1 2 3 1 2 2 3 3 2 3 0 2 1 0 0 2 3 1 3 3 1 1 2 3 2,(3-¯1×⎕io-⍳4),0 1 1 3 2 3 2 2 1 2 0 2 3 1 0 2 3 3 3 2 1 0 3 2 2 2 1 0 0 2 3 3 2 1 2 1 3 2 3 0 1 2 1 2 0 3 3 3 1 3 2 0 1 0 0 1 3 3 2 1 3 0 0 0 2 3 3 2 1 1 3 0 0 2 0 2 3 0 0 1 0 2 2 3 0 3 3 3 1 2 0 0 1 0 1 1 3 3 1 2 3 2 2 3 2 0 2 0 3 0 2 0 2 3 1 0 2 0 0 2 1 0 3 1 3 2 0 2 2 3 1 3 0 2 1 1 0 1 0 1 3 0 0 3 3 1 2 0 3 2 3 1 2 0 3 2 1,(3-¯1×⎕io-⍳4),2 3 2 2 1 2 0 0 3 3 3 2 1 0 0 1 2 0 2 3 2 0 2 3 2 3 1 0 1 2,(4/1),3 2 3 2 3 1 0 0 3 0 1 3 3 0 1 0 3 3 1 2 1 1 3 3,(7/1),0 3 2 0 3 1 1 0 1 0 3 2 3 3 0 2 1 1 3 3 1 0,(4/2),0 3 2 2,(4/0),3 1 2 2 2 3,(3-¯1×⎕io-⍳4),0 0 1 3 0 3 3 3 0 0 1 0 2 1 3 0 3 0 0 3 1 0 3 1 3 3 3 0 2 3 2 3 0 2 1 1 1 0 3 3 1 2 1 1 1 3 0 2 0 2 1 0 2 2 1 3 0 1 1 0 3 1 2 0 2 1 1 1 2 3 3 2 2 1 3 0 1 3 1 0 1 3 2 2 2 3 2 1 2 3 2 1 0 2 1 3 0 0 0 1 2 0 1 0 2 3 2 0 0 1 2 2 3 1 2 2 2 1 1 0 2 0 3 0 2 3 0 3 3 0 1 0 1 0 1 3 1 2 0 0 0 1 2 3 2 3 1 1 1 0 1 0 2 1 3 3 3 0 2 1 0 0 0 3 2 3 0 0 0 2 0 0 2 3 2 3 2 2 3 2 2 3 0 2 2 0 1 2 2 3 1 0 0 3 1 1 2 3 3 0 0 2 2 0 3,(+⍳4),2 2 2 0 1 0 3 0 3 3 2 3 1 0,(3-¯1×⎕io-⍳4),0 3 3 2 0 0 2 0 3 0 3 2 2 3 0 2 2 2 0 0 3 3 3 1 2 3 2 0 0 1 1 2 2 2,(4/0),3 0 0 1 3 1 1 2 3 2 0 2 0 3 3 0 2 2 0 2 0 3 0 1 0 0 1,(3-¯1×⎕io-⍳4),2 3 1 0 1 0 3 0 1 2 0 0 1 0 1 0 3 3 0 2 1 1 2 3 0 1 2 0 0 3 3 2 0 3 0 0 3 3 2 2 0 3 0 0 0 3 1 2 2 1 3 0 1 0 3 2 3 3,(4/2),0 1 0 1 3 0 0 1 0 0 1 1 2 1 1 2 1 3 1 1 2 2 0 1 1 2 2 1 3 0 0 2 1 3 3 1 3 2 2 0 1 3 3 0 0 0 1 2 1 1 3 3 1 0 2 2 0 0 0 3 2 1 2 0 2 2 0 3 3 2 2 0 0 1 1 2 3 1 1 3 0 0 3 3 3 2 2 1 0 2 3 2 3 0 0 2 2 1 0 0 0 0 0 3 1 0 0 1 1 3 3 1 2 1 3 2 2 1 0 0 3 0 0 2 0 2 0 1 0 2 3 2 0 0 2 3 1 2 3 2 3 1 2 3 3 2 2 0 1 2 2,(5/1),3 0 1 3 3 1 0 0 3,(4/1),2 0 2 1 1 3 1 2 1 2 3 1 1 0 3 3 0 1 0 2 3 2 0,(4/3),0 3 0 3 2 1 3 0 2 2 1 0 2 0 1 3 0 1,(+⍳4),1 2 0 1 3 2 3 2 2 2 0 3 1 3 0 3 0 1 3 2 0 2 2 0 1 1 0 3 3 3 1 1 0 0 2 3 0 2 1 2 1 0 1 1 0 1 3 0 1 0 0 3 1 1 0 2 3 0 2 1 0 1 0 3 1,(+⍳4),0 2 0 3 3 3 0 0 2 1 1 2 1 3 0 1 3 2 2 0 3,(+⍳4),1 3 1 3 0 3 3 0 0 1 0,(4/2),1 2 1 0 0 3 1 3 1 3 3 0 2 0 2 1 3 3 2 2 1 3 3 3 2 1 2 1 2 2 1 3 2 2 1 1 3 0 0 3 2 1 1 3 0 2 2 1 0 2 1 1 0 2 1 1 1 3 1 3 0 0 1 2 2 3 1 1 1 3 0 1 1 1 2 0 0 1 1 0 2 3 0 1 0 2 2,(4/3),0 3 0 0 1 0 0 1 3 2 0 3 2 3 2 3 2 0 0 1 1 0 2 1 3 3 0 3 3 0 3 3 0 2 0 0 2 1 0 2 3 2 0 3 0 3 3 2 1 3 0 3 3 3 0 2 1 3 3 1 0 1 1 2 2 3 2 2 1 2 3 2 0 2 0 2 1 3 0 0 2 3 2 1 2 1 3 1 0 0 0 3 3 1 3 3 2 3 2 0 3 2,(6/3),2 3 1 3 0 2 1 3 1 2 2 3 0 2 1 2 3 0 3 1 2 2 2 1 3 2 1 2 3 3 1 1 2 0 0 2 1 0 3 3 3 1 2 0 1 1 2 3 3 0 2 3 0 1 2 1 1 0 1,(3-¯1×⎕io-⍳4),1 0 1 1 2 0 1 0 3 3 2 1 1 3,(4/0),1 3 2 3 3 1 3 0 0 2 3 3 3 0 1 3 2 3 0 1 2 2 3 0 2 2 1 3 0 2 2 3,(5/1),3 1 0 3 2 0 3 0 1,(3-¯1×⎕io-⍳4),3 1 2 0 2 3 3 3 0 0 3 1 0 3 3 0 2 1 1 3 3 1 1 0 0 1 3 3 0 0 2 1 2 2 1 1 2 0 3 2 1 3 2 1 1 3 0 3 2 0 3 3 2 3 1 3 3 1 3 1 2 3 3 3 2 3 1 3 3 3 0 3 1 1 2 3 3 3 2 2 0 2 1 1 0 1 3 3 0 1 3 2 3 3 3 1 1 3 0 0 0 3 0 3 2 2 2 0 3 1 1 0 3 0 0 3 1 1 3 0 1 1 2 2 1 0 3 2 0 3 0 2 3 0 2 3 0 3 0 0 2 2 0 2 1 1 0 0 2 2 2 1 2 1 2 0 2 2 3 3 3 2 1 0 3 0 2 1 3 0 3 3 1 2 3 0 0 3 3 0 3 3 0 1 2 0 1 3 2 2 1 0 1 2 3 3 3 1 2 1 2 2 0 2 2 1 2 2 3 1 2 1 1 2 1 2 0 0 1 2 1 1 1 0 2 3 3 2 1 2 1 1 2 2 0 3 1 1,(3-¯1×⎕io-⍳4),1 3 2 2 3 0 0 2 0 1 3 3,(+⍳4),0 2 0 2 3 2 2 2 0 3 3 1,(3-¯1×⎕io-⍳4),1 3 1 3 0 1 1 0 0 1 3 0 3 3 2 0 2 0 2 1 0 2 2 2 3 2,(3-¯1×⎕io-⍳4),2,(4/0),2 0 1 0 3 0 1 0 1 1 2 1 1 0 1 3 0 1 3 0 2 1 3 3 1 3 2 2 2 1 1 3 1 0 2 2 2 1 1 2 0 1 3 0 3 3 3 2 2 2 1 0 2 1 0 3 3 1 2 1 3 3 3 2 3 3 0 2 3 3 1 0 3 3 2 0 0 2 2 3 0 2 3 0 0 3 0 2 1 1 3 1 2 1 1 3 0 0 3 2 2 3 3 2 1 3 0 1 3 1 3 3 0 0 0 1 1 3 0 2 2 3 3 2 1 2 0 3 3 1 3 0 1 2 1 1 0 0 0 1 1 0 0 1 3 1 2 0 3 2 0 0 1 0 0 0 1 2 0 0 3 3 1 2 0 1 2 1 0 0 1 0 2 1 1 0 3 1 1 0 2 2 0 0 2 2 1 3 1 3 1 3 0 1 3 3 0 2 1 1 0 0 1 2 1 3 0 2 3 0 2 0 3 3 2 2 1 0 3 1 1 1 2 3 2 3 2 0 1 1 1 3 3 2 0 1 0 2 3 0 3 3 1 1 2 0 1 2,(+⍳4),1 3 1 2 1 3 2 3 2 1 2 0 0 1 1 2 2 2 1 1 3 1 2 1 0 1 3 2 2 3,(4/2),1 1 0 3 2 1 1 3 3 0 1 1 0 1 0 3 3 2 0 2 0 2 1 0 3 3 1 1 0 0 3 3 2 3 2 1,(4/2),0 0 0 3 3 3 2 2 1 3 2 0 3 0 3 0 3 0 0 3 2 3 0 2 3 0 0 2 0 1 0 0 1 3 2 3 0 3 3 1 1 3 3 3 0 2 3 0 0 1 1 3 1 0 2 0 1 3 0 3 1 0 1 1 0 3 0,(5/1),2 1,(3-¯1×⎕io-⍳4),2 3 1 3 0 1 0 1 0 0 0 3 3 2 1 3 3 0 2 3 2 2 2 0 3 2 0 1 2,(4/0),3 2 2 2 3 3 0 2 0 0 0 2 1 0 3 0 1 3 3 2 3 1 3 0 1 0 3 0 0 2 1 1 2 0,(4/2),1 0 2 1 1 2 1 0 0 1 2 0 3 0,(+⍳4),1 3 0 1,(+⍳4),1 0 0 2 3 1 0 1 1 1 0 0 3 3 2 3 2 2 0 2 1 3 2 3 2 1 1 2 1 0 0 1 2 0 0 0 2 1 1 0 3 1 0 2 3 3 1 0 2 1 2 2 2 3 2 0 2 2 1 3 1 1 2 0 0 2 2 3 3 1 2 3 0 3 3 1 2 1 0 1 3 1 0 2 1 0 1 2 1 1 1 2 3 2 2 2 1 1 2 3 0 3 1 3 3 1 1 3 0 3 0 3 1 0 3 3 1 0 1 0,(4/1),3 2 0 2 0 2 1 1 3 1 0 3 2 1 3 0 3 1 2 0 2 3 3 0 3 3 0 3 1 3 0 2 3 2 0 1 3 1 2 0 3 0 0 1 2 2 3 0 2 2,(+⍳4),0 2 3 2 0 2 3 2 3 0 3 0 0 1 2 2 0 0 1 3 3 2 0 2 2 0 1 2 0 0 3 3 2 2 0 2 2 0 2 1 0 3 3 0 1 1 0 0 2 0 1 1 3 0 3 2 1 1 2 1 0 1 1 1,(4/3),1 2 0 3 0 0 2 2 2 0 0,(5/1),3 2 0 1 3 3 0 3 0 1 0 1 2 0 2 3 1 1 3 2 0 3 2 0 2 1 0 0 3 2 3 1 1 3 3 0 1 3 0 3 2 2 3 3 0 2 0 3 3 0 0 2 1 1 2 2 2 1 3 0 0 0 2 3 3 0 3 3 2 0 2 2 2 0 3 2 0 1 1 2 3,(4/2),0 1 0 3 2,(4/3),2 3 2 2 2 3 2 3 1 0 0 1 0 1 0 2 1 1 1 3 1 2 3 1 2 2 3 3 2 3 0 2 1 0 0 2 3 1 3 3 1 1 2 3 2,(3-¯1×⎕io-⍳4),0 1 1 3 2 3 2 2 1 2 0 2 3 1 0 2 3 3 3 2 1 0 3 2 2 2 1 0 0 2 3 3 2 1 2 1 3 2 3 0 1 2 1 2 0 3 3 3 1 3 2 0 1 0 0 1 3 3 2 1 3 0 0 0 2 3 3 2 1 1 3 0 0 2 0 2 3 0 0 1 0 2 2 3 0 3 3 3 1 2 0 0 1 0 1 1 3 3 1 2 3 2 2 3 2 0 2 0 3 0 2 0 2 3 1 0 2 0 0 2 1 0 3 1 3 2 0 2 2 3 1 3 0 2 1 1 0 1 0 1 3 0 0 3 3 1 2 0 3 2 3 1 2 0 3 2 1,(3-¯1×⎕io-⍳4),2 3 2 2 1 2 0 0 3 3 3 2 1 0 0 1 2 0 2 3 2 0 2 3 2 3 1 0 1 2,(4/1),3 2 3 2 3 1 0 0 3 0 1 3 3 0 1 0 3 3 1 2 1 1 3 3,(7/1),0 3 2 0 3 1 1 0 1 0 3 2 3 3 0 2 1 1 3 3 1 0,(4/2),0 3 2 2,(4/0),3 1 2 2 2 3,(3-¯1×⎕io-⍳4),0 0 1 3 0 3 3 3 0 0 1 0 2 1 3 0 3 0 0 3 1 0 3 1 3 3 3 0 2 3 2 3 0 2 1 1 1 0 3 3 1 2 1 1 1 3 0 2 0 2 1 0 2 2 1 3 0 1 1 0 3 1 2 0 2 1 1 1 2 3 3 2 2 1 3 0 1 3 1 0 1 3 2 2 2 3 2 1 2 3 2 1 0 2 1 3 0 0 0 1 2 0 1 0 2 3 2 0 0 1 2 2 3 1 2 2 2 1 1 0 2 0 3 0 2 3 0 3 3 0 1 0 1 0 1 3 1 2 0 0 0 1 2 3 2 3 1 1 1 0 1 0 2 1 3 3 3 0 2 1 0 0 0 3 2 3 0 0 0 2 0 0 2 3 2 3 2 2 3 2 2 3 0 2 2 0 1 2 2 3 1 0 0 3 1 1 2 3 3 0 0 2 2 0 3,(+⍳4),2 2 2 0 1 0 3 0 3 3 2 3 1 0,(3-¯1×⎕io-⍳4),0 3 3 2 0 0 2 0 3 0 3 2 2 3 0 2 2 2 0 0 3 3 3 1 2 3 2 0 0 1 1 2 2 2,(4/0),3 0 0 1 3 1 1 2 3 2 0 2 0 3 3 0 2 2 0 2 0 3 0 1 0 0 1,(3-¯1×⎕io-⍳4),2 3 1 0 1 0 3 0 1 2 0 0 1 0 1 0 3 3 0 2 1 1 2 3 0 1 2 0 0 3 3 2 0 3 0 0 3 3 2 2 0 3 0 0 0 3 1 2 2 1 3 0 1 0 3 2 3 3,(4/2),0 1 0 1 3 0 0 1 0 0 1 1 2 1 1 2 1 3 1 1 2 2 0 1 1 2 2 1 3 0 0 2 1 3 3 1 3 2 2 0 1 3 3 0 0 0 1 2 1 1 3 3 1 0 2 2 0 0 0 3 2 1 2 0 2 2 0 3 3 2 2 0 0 1 1 2 3 1 1 3 0 0 3 3 3 2 2 1 0 2 3 2 3 0 0 2 2 1 0 0 0 0 0 3 1 0 0 1 1 3 3 1 2 1 3 2 2 1 0 0 3 0 0 2 0 2 0 1 0 2 3 2 0 0 2 3 1 2 3 2 3 1 2 3 3 2 2 0 1 2 2,(5/1),3 0 1 3 3 1 0 0 3,(4/1),2 0 2 1 1 3 1 2 1 2 3 1 1 0 3 3 0 1 0 2 3 2 0,(4/3),0 3 0 3 2 1 3 0 2 2 1 0 2 0 1 3 0 1,(+⍳4),1 2 0 1 3 2 3 2 2 2 0 3 1 3 0 3 0 1 3 2 0 2 2 0 1 1 0 3 3 3 1 1 0 0 2 3 0 2 1 2 1 0 1 1 0 1 3 0 1 0 0 3 1 1 0 2 3 0 2 1 0 1 0 3 1,(+⍳4),0 2 0 3 3 3 0 0 2 1 1 2 1 3 0 1 3 2 2 0 3,(+⍳4),1 3 1 3 0 3 3 0 0 1 0,(4/2),1 2 1 0 0 3 1 3 1 3 3 0 2 0 2 1 3 3 2 2 1 3 3 3 2 1 2 1 2 2 1 3 2 2 1 1 3 0 0 3 2 1 1 3 0 2 2 1 0 2 1 1 0 2 1 1 1 3 1 3 0 0 1 2 2 3 1 1 1 3 0 1 1 1 2 0 0 1 1 0 2 3 0 1 0 2 2,(4/3),0 3 0 0 1 0 0 1 3 2 0 3 2 3 2 3 2 0 0 1 1 0 2 1 3 3 0 3 3 0 3 3 0 2 0 0 2 1 0 2 3 2 0 3 0 3 3 2 1 3 0 3 3 3 0 2 1 3 3 1 0 1 1 2 2 3 2 2 1 2 3 2 0 2 0 2 1 3 0 0 2 3 2 1 2 1 3 1 0 0 0 3 3 1 3 3 2 3 2 0 3 2,(6/3),2 3 1 3 0 2 1 3 1 2 2 3 0 2 1 2 3 0 3 1 2 2 2 1 3 2 1 2 3 3 1 1 2 0 0 2 1 0 3 3 3 1 2 0 1 1 2 3 3 0 2 3 0 1 2 1 1 0 1,(3-¯1×⎕io-⍳4),1 0 1 1 2 0 1 0 3 3 2 1 1 3,(4/0),1 3 2 3 3 1 3 0 0 2 3 3 3 0 1 3 2 3 0 1 2 2 3 0 2 2 1 3 0 2 2 3,(5/1),3 1 0 3 2 0 3 0 1,(3-¯1×⎕io-⍳4),3 1 2 0 2 3 3 3 0 0 3 1 0 3 3 0 2 1 1 3 3 1 1 0 0 1 3 3 0 0 2 1 2 2 1 1 2 0 3 2 1 3 2 1 1 3 0 3 2 0 3 3 2 3 1 3 3 1 3 1 2 3 3 3 2 3 1 3 3 3 0 3 1 1 2 3 3 3 2 2 0 2 1 1 0 1 3 3 0 1 3 2 3 3 3 1 1 3 0 0 0 3 0 3 2 2 2 0 3 1 1 0 3 0 0 3 1 1 3 0 1 1 2 2 1 0 3 2 0 3 0 2 3 0 2 3 0 3 0 0 2 2 0 2 1 1 0 0 2 2 2 1 2 1 2 0 2 2 3 3 3 2 1 0 3 0 2 1 3 0 3 3 1 2 3 0 0 3 3 0 3 3 0 1 2 0 1 3 2 2 1 0 1 2 3 3 3 1 2 1 2 2 0 2 2 1 2 2 3 1 2 1 1 2 1 2 0 0 1 2 1 1 1 0 2 3 3 2 1 2 1 1 2 2 0 3 1 1,(3-¯1×⎕io-⍳4),1 3 2 2 3 0 0 2 0 1 3 3,(+⍳4),0 2 0 2 3 2 2 2 0 3 3 1,(3-¯1×⎕io-⍳4),1 3 1 3 0 1 1 0 0 1 3 0 3 3 2 0 2 0 2 1 0 2 2 2 3 2,(3-¯1×⎕io-⍳4),2,(4/0),2 0 1 0 3 0 1 0 1 1 2 1 1 0 1 3 0 1 3 0 2 1 3 3 1 3 2 2 2 1 1 3 1 0 2 2 2 1 1 2 0 1 3 0 3 3 3 2 2 2 1 0 2 1 0 3 3 1 2 1 3 3 3 2 3 3 0 2 3 3 1 0 3 3 2 0 0 2 2 3 0 2 3 0 0 3 0 2 1 1 3 1 2 1 1 3 0 0 3 2 2 3 3 2 1 3 0 1 3 1 3 3 0 0 0 1 1 3 0 2 2 3 3 2 1 2 0 3 3 1 3 0 1 2 1 1 0 0 0 1 1 0 0 1 3 1 2 0 3 2 0 0 1 0 0 0 1 2 0 0 3 3 1 2 0 1 2 1 0 0 1 0 2 1 1 0 3 1 1 0 2 2 0 0 2 2 1 3 1 3 1 3 0 1 3 3 0 2 1 1 0 0 1 2 1 3 0 2 3 0 2 0 3 3 2 2 1 0 3 1 1 1 2 3 2 3 2 0 1 1 1 3 3 2 0 1 0 2 3 0 3 3 1 1 2 0 1 2,(+⍳4),1 3 1 2 1 3 2 3 2 1 2 0 0 1 1 2 2 2 1 1 3 1 2 1 0 1 3 2 2 3,(4/2),1 1 0 3 2 1 1 3 3 0 1 1 0 1 0 3 3 2 0 2 0 2 1 0 3 3 1 1 0 0 3 3 2 3 2 1,(4/2),0 0 0 3 3 3 2 2 1 3 2 0 3 0 3 0 3 0 0 3 2 3 0 2 3 0 0 2 0 1 0 0 1 3 2 3 0 3 3 1 1 3 3 3 0 2 3 0 0 1 1 3 1 0 2 0 1 3 0 3 1 0 1 1 0 3 0,(5/1),2 1,(3-¯1×⎕io-⍳4),2 3 1 3 0 1 0 1 0 0 0 3 3 2 1 3 3 0 2 3 2 2 2 0 3 2 0 1 2,(4/0),3 2 2 2 3 3 0 2 0 0 0 2 1 0 3 0 1 3 3 2 3 1 3 0 1 0 3 0 0 2 1 1 2 0,(4/2),1 0 2 1 1 2 1 0 0 1 2 0 3 0,(+⍳4),1 3 0 1,(+⍳4),1 0 0 2 3 1 0 1 1 1 0 0 3 3 2 3 2 2 0 2 1 3 2 3 2 1 1 2 1 0 0 1 2 0 0 0 2 1 1 0 3 1 0 2 3 3 1 0 2 1 2 2 2 3 2 0 2 2 1 3 1 1 2 0 0 2 2 3 3 1 2 3 0 3 3 1 2 1 0 1 3 1 0 2 1 0 1 2 1 1 1 2 3 2 2 2 1 1 2 3 0 3 1 3 3 1 1 3 0 3 0 3 1 0 3 3 1 0 1 0,(4/1),3 2 0 2 0 2 1 1 3 1 0 3 2 1 3 0 3 1 2 0 2 3 3 0 3 3 0 3 1 3 0 2 3 2 0 1 3 1 2 0 3 0 0 1 2 2 3 0 2 2,(+⍳4),0 2 3 2 0 2 3 2 3 0 3 0 0 1 2 2 0 0 1 3 3 2 0 2 2 0 1 2 0 0 3 3 2 2 0 2 2 0 2 1 0 3 3 0 1 1 0 0 2 0 1 1 3 0 3 2 1 1 2 1 0 1 1 1,(4/3),1 2 0 3 0 0 2 2 2 0 0,(5/1),3 2 0 1 3 3 0 3 0 1 0 1 2 0 2 3 1 1 3 2 0 3 2 0 2 1 0 0 3 2 3 1 1 3 3 0 1 3 0 3 2 2 3 3 0 2 0 3 3 0 0 2 1 1 2 2 2 1 3 0 0 0 2 3 3 0 3 3 2 0 2 2 2 0 3 2 0 1 1 2 3,(4/2),0 1 0 3 2,(4/3),2 3 2 2 2 3 2 3 1 0 0 1 0 1 0 2 1 1 1 3 1 2 3 1 2 2 3 3 2 3 0 2 1 0 0 2 3 1 3 3 1 1 2 3 2,(3-¯1×⎕io-⍳4),0 1 1 3 2 3 2 2 1 2 0 2 3 1 0 2 3 3 3 2 1 0 3 2 2 2 1 0 0 2 3 3 2 1 2 1 3 2 3 0 1 2 1 2 0 3 3 3 1 3 2 0 1 0 0 1 3 3 2 1 3 0 0 0 2 3 3 2 1 1 3 0 0 2 0 2 3 0 0 1 0 2 2 3 0 3 3 3 1 2 0 0 1 0 1 1 3 3 1 2 3 2 2 3 2 0 2 0 3 0 2 0 2 3 1 0 2 0 0 2 1 0 3 1 3 2 0 2 2 3 1 3 0 2 1 1 0 1 0 1 3 0 0 3 3 1 2 0 3 2 3 1 2 0 3 2 1,(3-¯1×⎕io-⍳4),2 3 2 2 1 2 0 0 3 3 3 2 1 0 0 1 2 0 2 3 2 0 2 3 2 3 1 0 1 2,(4/1),3 2 3 2 3 1 0 0 3 0 1 3 3 0 1 0 3 3 1 2 1 1 3 3,(7/1),0 3 2 0 3 1 1 0 1 0 3 2 3 3 0 2 1 1 3 3 1 0,(4/2),0 3 2 2,(4/0),3 1 2 2 2 3,(3-¯1×⎕io-⍳4),0 0 1 3 0 3 3 3 0 0 1 0 2 1 3 0 3 0 0 3 1 0 3 1 3 3 3 0 2 3 2 3 0 2 1 1 1 0 3 3 1 2 1 1 1 3 0 2 0 2 1 0 2 2 1 3 0 1 1 0 3 1 2 0 2 1 1 1 2 3 3 2 2 1 3 0 1 3 1 0 1 3 2 2 2 3 2 1 2 3 2 1 0 2 1 3 0 0 0 1 2 0 1 0 2 3 2 0 0 1 2 2 3 1 2 2 2 1 1 0 2 0 3 0 2 3 0 3 3 0 1 0 1 0 1 3 1 2 0 0 0 1 2 3 2 3 1 1 1 0 1 0 2 1 3 3 3 0 2 1 0 0 0 3 2 3 0 0 0 2 0 0 2 3 2 3 2 2 3 2 2 3 0 2 2 0 1 2 2 3 1 0 0 3 1 1 2 3 3 0 0 2 2 0 3,(+⍳4),2 2 2 0 1 0 3 0 3 3 2 3 1 0,(3-¯1×⎕io-⍳4),0 3 3 2 0 0 2 0 3 0 3 2 2 3 0 2 2 2 0 0 3 3 3 1 2 3 2 0 0 1 1 2 2 2,(4/0),3 0 0 1 3 1 1 2 3 2 0 2 0 3 3 0 2 2 0 2 0 3 0 1 0 0 1,(3-¯1×⎕io-⍳4),2 3 1 0 1 0 3 0 1 2 0 0 1 0 1 0 3 3 0 2 1 1 2 3 0 1 2 0 0 3 3 2 0 3 0 0 3 3 2 2 0 3 0 0 0 3 1 2 2 1 3 0 1 0 3 2 3 3,(4/2),0 1 0 1 3 0 0 1 0 0 1 1 2 1 1 2 1 3 1 1 2 2 0 1 1 2 2 1 3 0 0 2 1 3 3 1 3 2 2 0 1 3 3 0 0 0 1 2 1 1 3 3 1 0 2 2 0 0 0 3 2 1 2 0 2 2 0 3 3 2 2 0 0 1 1 2 3 1 1 3 0 0 3 3 3 2 2 1 0 2 3 2 3 0 0 2 2 1 0 0 0 0 0 3 1 0 0 1 1 3 3 1 2 1 3 2 2 1 0 0 3 0 0 2 0 2 0 1 0 2 3 2 0 0 2 3 1 2 3 2 3 1 2 3 3 2 2 0 1 2 2,(5/1),3 0 1 3 3 1 0 0 3,(4/1),2 0 2 1 1 3 1 2 1 2 3 1 1 0 3 3 0 1 0 2 3 2 0,(4/3),0 3 0 3 2 1 3 0 2 2 1 0 2 0 1 3 0 1,(+⍳4),1 2 0 1 3 2 3 2 2 2 0 3 1 3 0 3 0 1 3 2 0 2 2 0 1 1 0 3 3 3 1 1 0 0 2 3 0 2 1 2 1 0 1 1 0 1 3 0 1 0 0 3 1 1 0 2 3 0 2 1 0 1 0 3 1,(+⍳4),0 2 0 3 3 3 0 0 2 1 1 2 1 3 0 1 3 2 2 0 3,(+⍳4),1 3 1 3 0 3 3 0 0 1 0,(4/2),1 2 1 0 0 3 1 3 1 3 3 0 2 0 2 1 3 3 2 2 1 3 3 3 2 1 2 1 2 2 1 3 2 2 1 1 3 0 0 3 2 1 1 3 0 2 2 1 0 2 1 1 0 2 1 1 1 3 1 3 0 0 1 2 2 3 1 1 1 3 0 1 1 1 2 0 0 1 1 0 2 3 0 1 0 2 2,(4/3),0 3 0 0 1 0 0 1 3 2 0 3 2 3 2 3 2 0 0 1 1 0 2 1 3 3 0 3 3 0 3 3 0 2 0 0 2 1 0 2 3 2 0 3 0 3 3 2 1 3 0 3 3 3 0 2 1 3 3 1 0 1 1 2 2 3 2 2 1 2 3 2 0 2 0 2 1 3 0 0 2 3 2 1 2 1 3 1 0 0 0 3 3 1 3 3 2 3 2 0 3 2,(6/3),2 3 1 3 0 2 1 3 1 2 2 3 0 2 1 2 3 0 3 1 2 2 2 1 3 2 1 2 3 3 1 1 2 0 0 2 1 0 3 3 3 1 2 0 1 1 2 3 3 0 2 3 0 1 2 1 1 0 1,(3-¯1×⎕io-⍳4),1 0 1 1 2 0 1 0 3 3 2 1 1 3,(4/0),1 3 2 3 3 1 3 0 0 2 3 3 3 0 1 3 2 3 0 1 2 2 3 0 2 2 1 3 0 2 2 3,(5/1),3 1 0 3 2 0 3 0 1,(3-¯1×⎕io-⍳4),3 1 2 0 2 3 3 3 0 0 3 1 0 3 3 0 2 1 1 3 3 1 1 0 0 1 3 3 0 0 2 1 2 2 1 1 2 0 3 2 1 3 2 1 1 3 0 3 2 0 3 3 2 3 1 3 3 1 3 1 2 3 3 3 2 3 1 3 3 3 0 3 1 1 2 3 3 3 2 2 0 2 1 1 0 1 3 3 0 1 3 2 3 3 3 1 1 3 0 0 0 3 0 3 2 2 2 0 3 1 1 0 3 0 0 3 1 1 3 0 1 1 2 2 1 0 3 2 0 3 0 2 3 0 2 3 0 3 0 0 2 2 0 2 1 1 0 0 2 2 2 1 2 1 2 0 2 2 3 3 3 2 1 0 3 0 2 1 3 0 3 3 1 2 3 0 0 3 3 0 3 3 0 1 2 0 1 3 2 2 1 0 1 2 3 3 3 1 2 1 2 2 0 2 2 1 2 2 3 1 2 1 1 2 1 2 0 0 1 2 1 1 1 0 2 3 3 2 1 2 1 1 2 2 0 3 1 1,(3-¯1×⎕io-⍳4),1 3 2 2 3 0 0 2 0 1 3 3,(+⍳4),0 2 0 2 3 2 2 2 0 3 3 1,(3-¯1×⎕io-⍳4),1 3 1 3 0 1 1 0 0 1 3 0 3 3 2 0 2 0 2 1 0 2 2 2 3 2,(3-¯1×⎕io-⍳4),2,(4/0),2 0 1 0 3 0 1 0 1 1 2 1 1 0 1 3 0 1 3 0 2 1 3 3 1 3 2 2 2 1 1 3 1 0 2 2 2 1 1 2 0 1 3 0 3 3 3 2 2 2 1 0 2 1 0 3 3 1 2 1 3 3 3 2 3 3 0 2 3 3 1 0 3 3 2 0 0 2 2 3 0 2 3 0 0 3 0 2 1 1 3 1 2 1 1 3 0 0 3 2 2 3 3 2 1 3 0 1 3 1 3 3 0 0 0 1 1 3 0 2 2 3 3 2 1 2 0 3 3 1 3 0 1 2 1 1 0 0 0 1 1 0 0 1 3 1 2 0 3 2 0 0 1 0 0 0 1 2 0 0 3 3 1 2 0 1 2 1 0 0 1 0 2 1 1 0 3 1 1 0 2 2 0 0 2 2 1 3 1 3 1 3 0 1 3 3 0 2 1 1 0 0 1 2 1 3 0 2 3 0 2 0 3 3 2 2 1 0 3 1 1 1 2 3 2 3 2 0 1 1 1 3 3 2 0 1 0 2 3 0 3 3 1 1 2 0 1 2,(+⍳4),1 3 1 2 1 3 2 3 2 1 2 0 0 1 1 2 2 2 1 1 3 1 2 1 0 1 3 2 2 3,(4/2),1 1 0 3 2 1 1 3 3 0 1 1 0 1 0 3 3 2 0 2 0 2 1 0 3 3 1 1 0 0 3 3 2 3 2 1,(4/2),0 0 0 3 3 3 2 2 1 3 2 0 3 0 3 0 3 0 0 3 2 3 0 2 3 0 0 2 0 1 0 0 1 3 2 3 0 3 3 1 1 3 3 3 0 2 3 0 0 1 1 3 1 0 2 0 1 3 0 3 1 0 1 1 0 3 0,(5/1),2 1,(3-¯1×⎕io-⍳4),2 3 1 3 0 1 0 1 0 0 0 3 3 2 1 3 3 0 2 3 2 2 2 0 3 2 0 1 2,(4/0),3 2 2 2 3 3 0 2 0 0 0 2 1 0 3 0 1 3 3 2 3 1 3 0 1 0 3 0 0 2 1 1 2 0,(4/2),1 0 2 1 1 2 1 0 0 1 2 0 3 0,(+⍳4),1 3 0 1,(+⍳4),1 0 0 2 3 1 0 1 1 1 0 0 3 3 2 3 2 2 0 2 1 3 2 3 2 1 1 2 1 0 0 1 2 0 0 0 2 1 1 0 3 1 0 2 3 3 1 0 2 1 2 2 2 3 2 0 2 2 1 3 1 1 2 0 0 2 2 3 3 1 2 3 0 3 3 1 2 1 0 1 3 1 0 2 1 0 1 2 1 1 1 2 3 2 2 2 1 1 2 3 0 3 1 3 3 1 1 3 0 3 0 3 1 0 3 3 1 0 1 0,(4/1),3 2 0 2 0 2 1 1 3 1 0 3 2 1 3 0 3 1 2 0 2 3 3 0 3 3 0 3 1 3 0 2 3 2 0 1 3 1 2 0 3 0 0 1 2 2 3 0 2 2,(+⍳4),0 2 3 2 0 2 3 2 3 0 3 0 0 1 2 2 0 0 1 3 3 2 0 2 2 0 1 2 0 0 3 3 2 2 0 2 2 0 2 1 0 3 3 0 1 1 0 0 2 0 1 1 3 0 3 2 1 1 2 1 0 1 1 1,(4/3),1 2 0 3 0 0 2 2 2 0 0,(5/1),3 2 0 1 3 3 0 3 0 1 0 1 2 0 2 3 1 1 3 2 0 3 2 0 2 1 0 0 3 2 3 1 1 3 3 0 1 3 0 3 2 2 3 3 0 2 0 3 3 0 0 2 1 1 2 2 2 1 3 0 0 0 2 3 3 0 3 3 2 0 2 2 2 0 3 2 0 1 1 2 3,(4/2),0 1 0 3 2,(4/3),2 3 2 2 2 3 2 3 1 0 0 1 0 1 0 2 1 1 1 3 1 2 3 1 2 2 3 3 2 3 0 2 1 0 0 2 3 1 3 3 1 1 2 3 2,(3-¯1×⎕io-⍳4),0 1 1 3 2 3 2 2 1 2 0 2 3 1 0 2 3 3 3 2 1 0 3 2 2 2 1 0 0 2 3 3 2 1 2 1 3 2 3 0 1 2 1 2 0 3 3 3 1 3 2 0 1 0 0 1 3 3 2 1 3 0 0 0 2 3 3 2 1 1 3 0 0 2 0 2 3 0 0 1 0 2 2 3 0 3 3 3 1 2 0 0 1 0 1 1 3 3 1 2 3 2 2 3 2 0 2 0 3 0 2 0 2 3 1 0 2 0 0 2 1 0 3 1 3 2 0 2 2 3 1 3 0 2 1 1 0 1 0 1 3 0 0 3 3 1 2 0 3 2 3 1 2 0 3 2 1,(3-¯1×⎕io-⍳4),2 3 2 2 1 2 0 0 3 3 3 2 1 0 0 1 2 0 2 3 2 0 2 3 2 3 1 0 1 2,(4/1),3 2 3 2 3 1 0 0 3 0 1 3 3 0 1 0 3 3 1 2 1 1 3 3,(7/1),0 3 2 0 3 1 1 0 1 0 3 2 3 3 0 2 1 1 3 3 1 0,(4/2),0 3 2 2,(4/0),3 1 2 2 2 3,(3-¯1×⎕io-⍳4),0 0 1 3 0 3 3 3 0 0 1 0 2 1 3 0 3 0 0 3 1 0 3 1 3 3 3 0 2 3 2 3 0 2 1 1 1 0 3 3 1 2 1 1 1 3 0 2 0 2 1 0 2 2 1 3 0 1 1 0 3 1 2 0 2 1 1 1 2 3 3 2 2 1 3 0 1 3 1 0 1 3 2 2 2 3 2 1 2 3 2 1 0 2 1 3 0 0 0 1 2 0 1 0 2 3 2 0 0 1 2 2 3 1 2 2 2 1 1 0 2 0 3 0 2 3 0 3 3 0 1 0 1 0 1 3 1 2 0 0 0 1 2 3 2 3 1 1 1 0 1 0 2 1 3 3 3 0 2 1 0 0 0 3 2 3 0 0 0 2 0 0 2 3 2 3 2 2 3 2 2 3 0 2 2 0 1 2 2 3 1 0 0 3 1 1 2 3 3 0 0 2 2 0 3,(+⍳4),2 2 2 0 1 0 3 0 3 3 2 3 1 0,(3-¯1×⎕io-⍳4),0 3 3 2 0 0 2 0 3 0 3 2 2 3 0 2 2 2 0 0 3 3 3 1 2 3 2 0 0 1 1 2 2 2,(4/0),3 0 0 1 3 1 1 0 0 1,(25/0),2,(18/0),1,(114/0),1,(39/0),1 0 1,(31/0),1,(110/0),2,(36/0),1,(57/0),1,(36/0),2,(4/0),2,(13/0),1,(14/0),2,(14/0),2,(4/0),2 2 0 0 0 1,(44/0),1,(58/0),2,(67/0),1,(85/0),1 2,(26/0),2,(87/0),1,(59/0),2 0 1,(20/0),2,(48/0),1,(11/0),1,(58/0),1,(42/0),1,(63/0),2,(63/0),2,(28/0),1,(43/0),1,(109/0),1,(25/0),1,(6/0),1,(73/0),2,(9/0),2,(82/0),1,(31/0),1,(4/0),1,(23/0),1,(18/0),1,(16/0),1,(5/0),2,(16/0),1,(28/0),1,(91/0),1,(31/0),1,(16/0),1,(26/0),2,(83/0),2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2,(72/0),1,(38/0),1,(21/0),2,(232/0),2,(10/0),2,(32/0),1,(25/0),2,(18/0),1,(114/0),1,(39/0),1 0 1,(31/0),1,(110/0),2,(36/0),1,(57/0),1,(36/0),2,(4/0),2,(13/0),1,(14/0),2,(14/0),2,(4/0),2 2 0 0 0 1,(44/0),1,(58/0),2,(67/0),1,(85/0),1 2,(26/0),2,(87/0),1,(59/0),2 0 1,(20/0),2,(48/0),1,(11/0),1,(58/0),1,(42/0),1,(63/0),2,(63/0),2,(28/0),1,(43/0),1,(109/0),1,(25/0),1,(6/0),1,(73/0),2,(9/0),2,(82/0),1,(31/0),1,(4/0),1,(23/0),1,(18/0),1,(16/0),1,(5/0),2,(16/0),1,(28/0),1,(91/0),1,(31/0),1,(16/0),1,(26/0),2,(83/0),2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2,(72/0),1,(38/0),1,(21/0),2,(232/0),2,(10/0),2,(32/0),1,(25/0),2,(18/0),1,(114/0),1,(39/0),1 0 1,(31/0),1,(110/0),2,(36/0),1,(57/0),1,(36/0),2,(4/0),2,(13/0),1,(14/0),2,(14/0),2,(4/0),2 2 0 0 0 1,(44/0),1,(58/0),2,(67/0),1,(85/0),1 2,(26/0),2,(87/0),1,(59/0),2 0 1,(20/0),2,(48/0),1,(11/0),1,(58/0),1,(42/0),1,(63/0),2,(63/0),2,(28/0),1,(43/0),1,(109/0),1,(25/0),1,(6/0),1,(73/0),2,(9/0),2,(82/0),1,(31/0),1,(4/0),1,(23/0),1,(18/0),1,(16/0),1,(5/0),2,(16/0),1,(28/0),1,(91/0),1,(31/0),1,(16/0),1,(26/0),2,(83/0),2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2,(72/0),1,(38/0),1,(21/0),2,(232/0),2,(10/0),2,(32/0),1,(25/0),2,(18/0),1,(114/0),1,(39/0),1 0 1,(31/0),1,(110/0),2,(36/0),1,(57/0),1,(36/0),2,(4/0),2,(13/0),1,(14/0),2,(14/0),2,(4/0),2 2 0 0 0 1,(44/0),1,(58/0),2,(67/0),1,(85/0),1 2,(26/0),2,(87/0),1,(59/0),2 0 1,(20/0),2,(48/0),1,(11/0),1,(58/0),1,(42/0),1,(63/0),2,(63/0),2,(28/0),1,(43/0),1,(109/0),1,(25/0),1,(6/0),1,(73/0),2,(9/0),2,(82/0),1,(31/0),1,(4/0),1,(23/0),1,(18/0),1,(16/0),1,(5/0),2,(16/0),1,(28/0),1,(91/0),1,(31/0),1,(16/0),1,(26/0),2,(83/0),2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2,(72/0),1,(38/0),1,(21/0),2,(232/0),2,(10/0),2,30/0

Island50←2 50 50⍴2 3 2 0 2 0 3 3 0 2 2 0 2 0 3 0 1 0 0 1,(3-¯1×⎕io-⍳4),2 3 1 0 1 0 3 0 1 2 0 0 1 0 1 0 3 3 0 2 1 1 2 3 0 1 2 0 0 3 3 2 0 3 0 0 3 3 2 2 0 3 0 0 0 3 1 2 2 1 3 0 1 0 3 2 3 3,(4/2),0 1 0 1 3 0 0 1 0 0 1 1 2 1 1 2 1 3 1 1 2 2 0 1 1 2 2 1 3 0 0 2 1 3 3 1 3 2 2 0 1 3 3 0 0 0 1 2 1 1 3 3 1 0 2 2 0 0 0 3 2 1 2 0 2 2 0 3 3 2 2 0 0 1 1 2 3 1 1 3 0 0 3 3 3 2 2 1 0 2 3 2 3 0 0 2 2 1 0 0 0 0 0 3 1 0 0 1 1 3 3 1 2 1 3 2 2 1 0 0 3 0 0 2 0 2 0 1 0 2 3 2 0 0 2 3 1 2 3 2 3 1 2 3 3 2 2 0 1 2 2,(5/1),3 0 1 3 3 1 0 0 3,(4/1),2 0 2 1 1 3 1 2 1 2 3 1 1 0 3 3 0 1 0 2 3 2 0,(4/3),0 3 0 3 2 1 3 0 2 2 1 0 2 0 1 3 0 1,(+⍳4),1 2 0 1 3 2 3 2 2 2 0 3 1 3 0 3 0 1 3 2 0 2 2 0 1 1 0 3 3 3 1 1 0 0 2 3 0 2 1 2 1 0 1 1 0 1 3 0 1 0 0 3 1 1 0 2 3 0 2 1 0 1 0 3 1,(+⍳4),0 2 0 3 3 3 0 0 2 1 1 2 1 3 0 1 3 2 2 0 3,(+⍳4),1 3 1 3 0 3 3 0 0 1 0,(4/2),1 2 1 0 0 3 1 3 1 3 3 0 2 0 2 1 3 3 2 2 1 3 3 3 2 1 2 1 2 2 1 3 2 2 1 1 3 0 0 3 2 1 1 3 0 2 2 1 0 2 1 1 0 2 1 1 1 3 1 3 0 0 1 2 2 3 1 1 1 3 0 1 1 1 2 0 0 1 1 0 2 3 0 1 0 2 2,(4/3),0 3 0 0 1 0 0 1 3 2 0 3 2 3 2 3 2 0 0 1 1 0 2 1 3 3 0 3 3 0 3 3 0 2 0 0 2 1 0 2 3 2 0 3 0 3 3 2 1 3 0 3 3 3 0 2 1 3 3 1 0 1 1 2 2 3 2 2 1 2 3 2 0 2 0 2 1 3 0 0 2 3 2 1 2 1 3 1 0 0 0 3 3 1 3 3 2 3 2 0 3 2,(6/3),2 3 1 3 0 2 1 3 1 2 2 3 0 2 1 2 3 0 3 1 2 2 2 1 3 2 1 2 3 3 1 1 2 0 0 2 1 0 3 3 3 1 2 0 1 1 2 3 3 0 2 3 0 1 2 1 1 0 1,(3-¯1×⎕io-⍳4),1 0 1 1 2 0 1 0 3 3 2 1 1 3,(4/0),1 3 2 3 3 1 3 0 0 2 3 3 3 0 1 3 2 3 0 1 2 2 3 0 2 2 1 3 0 2 2 3,(5/1),3 1 0 3 2 0 3 0 1,(3-¯1×⎕io-⍳4),3 1 2 0 2 3 3 3 0 0 3 1 0 3 3 0 2 1 1 3 3 1 1 0 0 1 3 3 0 0 2 1 2 2 1 1 2 0 3 2 1 3 2 1 1 3 0 3 2 0 3 3 2 3 1 3 3 1 3 1 2 3 3 3 2 3 1 3 3 3 0 3 1 1 2 3 3 3 2 2 0 2 1 1 0 1 3 3 0 1 3 2 3 3 3 1 1 3 0 0 0 3 0 3 2 2 2 0 3 1 1 0 3 0 0 3 1 1 3 0 1 1 2 2 1 0 3 2 0 3 0 2 3 0 2 3 0 3 0 0 2 2 0 2 1 1 0 0 2 2 2 1 2 1 2 0 2 2 3 3 3 2 1 0 3 0 2 1 3 0 3 3 1 2 3 0 0 3 3 0 3 3 0 1 2 0 1 3 2 2 1 0 1 2 3 3 3 1 2 1 2 2 0 2 2 1 2 2 3 1 2 1 1 2 1 2 0 0 1 2 1 1 1 0 2 3 3 2 1 2 1 1 2 2 0 3 1 1,(3-¯1×⎕io-⍳4),1 3 2 2 3 0 0 2 0 1 3 3,(+⍳4),0 2 0 2 3 2 2 2 0 3 3 1,(3-¯1×⎕io-⍳4),1 3 1 3 0 1 1 0 0 1 3 0 3 3 2 0 2 0 2 1 0 2 2 2 3 2,(3-¯1×⎕io-⍳4),2,(4/0),2 0 1 0 3 0 1 0 1 1 2 1 1 0 1 3 0 1 3 0 2 1 3 3 1 3 2 2 2 1 1 3 1 0 2 2 2 1 1 2 0 1 3 0 3 3 3 2 2 2 1 0 2 1 0 3 3 1 2 1 3 3 3 2 3 3 0 2 3 3 1 0 3 3 2 0 0 2 2 3 0 2 3 0 0 3 0 2 1 1 3 1 2 1 1 3 0 0 3 2 2 3 3 2 1 3 0 1 3 1 3 3 0 0 0 1 1 3 0 2 2 3 3 2 1 2 0 3 3 1 3 0 1 2 1 1 0 0 0 1 1 0 0 1 3 1 2 0 3 2 0 0 1 0 0 0 1 2 0 0 3 3 1 2 0 1 2 1 0 0 1 0 2 1 1 0 3 1 1 0 2 2 0 0 2 2 1 3 1 3 1 3 0 1 3 3 0 2 1 1 0 0 1 2 1 3 0 2 3 0 2 0 3 3 2 2 1 0 3 1 1 1 2 3 2 3 2 0 1 1 1 3 3 2 0 1 0 2 3 0 3 3 1 1 2 0 1 2,(+⍳4),1 3 1 2 1 3 2 3 2 1 2 0 0 1 1 2 2 2 1 1 3 1 2 1 0 1 3 2 2 3,(4/2),1 1 0 3 2 1 1 3 3 0 1 1 0 1 0 3 3 2 0 2 0 2 1 0 3 3 1 1 0 0 3 3 2 3 2 1,(4/2),0 0 0 3 3 3 2 2 1 3 2 0 3 0 3 0 3 0 0 3 2 3 0 2 3 0 0 2 0 1 0 0 1 3 2 3 0 3 3 1 1 3 3 3 0 2 3 0 0 1 1 3 1 0 2 0 1 3 0 3 1 0 1 1 0 3 0,(5/1),2 1,(3-¯1×⎕io-⍳4),2 3 1 3 0 1 0 1 0 0 0 3 3 2 1 3 3 0 2 3 2 2 2 0 3 2 0 1 2,(4/0),3 2 2 2 3 3 0 2 0 0 0 2 1 0 3 0 1 3 3 2 3 1 3 0 1 0 3 0 0 2 1 1 2 0,(4/2),1 0 2 1 1 2 1 0 0 1 2 0 3 0,(+⍳4),1 3 0 1,(+⍳4),1 0 0 2 3 1 0 1 1 1 0 0 3 3 2 3 2 2 0 2 1 3 2 3 2 1 1 2 1 0 0 1 2 0 0 0 2 1 1 0 3 1 0 2 3 3 1 0 2 1 2 2 2 3 2 0 2 2 1 3 1 1 2 0 0 2 2 3 3 1 2 3 0 3 3 1 2 1 0 1 3 1 0 2 1 0 1 2 1 1 1 2 3 2 2 2 1 1 2 3 0 3 1 3 3 1 1 3 0 3 0 3 1 0 3 3 1 0 1 0,(4/1),3 2 0 2 0 2 1 1 3 1 0 3 2 1 3 0 3 1 2 0 2 3 3 0 3 3 0 3 1 3 0 2 3 2 0 1 3 1 2 0 3 0 0 1 2 2 3 0 2 2,(+⍳4),0 2 3 2 0 2 3 2 3 0 3 0 0 1 2 2 0 0 1 3 3 2 0 2 2 0 1 2 0 0 3 3 2 2 0 2 2 0 2 1 0 3 3 0 1 1 0 0 2 0 1 1 3 0 3 2 1 1 2 1 0 1 1 1,(4/3),1 2 0 3 0 0 2 2 2 0 0,(5/1),3 2 0 1 3 3 0 3 0 1 0 1 2 0 2 3 1 1 3 2 0 3 2 0 2 1 0 0 3 2 3 1 1 3 3 0 1 3 0 3 2 2 3 3 0 2 0 3 3 0 0 2 1 1 2 2 2 1 3 0 0 0 2 3 3 0 3 3 2 0 2 2 2 0 3 2 0 1 1 2 3,(4/2),0 1 0 3 2,(4/3),2 3 2 2 2 3 2 3 1 0 0 1 0 1 0 2 1 1 1 3 1 2 3 1 2 2 3 3 2 3 0 2 1 0 0 2 3 1 3 3 1 1 2 3 2,(3-¯1×⎕io-⍳4),0 1 1 3 2 3 2 2 1 2 0 2 3 1 0 2 3 3 3 2 1 0 3 2 2 2 1 0 0 2 3 3 2 1 2 1 3 2 3 0 1 2 1 2 0 3 3 3 1 3 2 0 1 0 0 1 3 3 2 1 3 0 0 0 2 3 3 2 1 1 3 0 0 2 0 2 3 0 0 1 0 2 2 3 0 3 3 3 1 2 0 0 1 0 1 1 3 3 1 2 3 2 2 3 2 0 2 0 3 0 2 0 2 3 1 0 2 0 0 2 1 0 3 1 3 2 0 2 2 3 1 3 0 2 1 1 0 1 0 1 3 0 0 3 3 1 2 0 3 2 3 1 2 0 3 2 1,(3-¯1×⎕io-⍳4),2 3 2 2 1 2 0 0 3 3 3 2 1 0 0 1 2 0 2 3 2 0 2 3 2 3 1 0 1 2,(4/1),3 2 3 2 3 1 0 0 3 0 1 3 3 0 1 0 3 3 1 2 1 1 3 3,(7/1),0 3 2 0 3 1 1 0 1 0 3 2 3 3 0 2 1 1 3 3 1 0,(4/2),0 3 2 2,(4/0),3 1 2 2 2 3,(3-¯1×⎕io-⍳4),0 0 1 3 0 3 3 3 0 0 1 0 2 1 3 0 3 0 0 3 1 0 3 1 3 3 3 0 2 3 2 3 0 2 1 1 1 0 3 3 1 2 1 1 1 3 0 2 0 2 1 0 2 2 1 3 0 1 1 0 3 1 2 0 2 1 1 1 2 3 3 2 2 1 3 0 1 3 1 0 1 3 2 2 2 3 2 1 2 3 2 1 0 2 1 3 0 0 0 1 2 0 1 0 2 3 2 0 0 1 2 2 3 1 2 2 2 1 1 0 2 0 3 0 2 3 0 3 3 0 1 0 1 0 1 3 1 2 0 0 0 1 2 3 2 3 1 1 1 0 1 0 2 1 3 3 3 0 2 1 0 0 0 3 2 3 0 0 0 2 0 0 2 3 2 3 2 2 3 2 2 3 0 2 2 0 1 2 2 3 1 0 0 3 1 1 2 3 3 0 0 2 2 0 3,(+⍳4),2 2 2 0 1 0 3 0 3 3 2 3 1 0,(3-¯1×⎕io-⍳4),0 3 3 2 0 0 2 0 3 0 3 2 2 3 0 2 2 2 0 0 3 3 3 1 2 3 2 0 0 1 1 2 2 2,(4/0),3 0 0 1 3 1 1 0 0 1,(25/0),2,(18/0),1,(114/0),1,(39/0),1 0 1,(31/0),1,(110/0),2,(36/0),1,(57/0),1,(36/0),2,(4/0),2,(13/0),1,(14/0),2,(14/0),2,(4/0),2 2 0 0 0 1,(44/0),1,(58/0),2,(67/0),1,(85/0),1 2,(26/0),2,(87/0),1,(59/0),2 0 1,(20/0),2,(48/0),1,(11/0),1,(58/0),1,(42/0),1,(63/0),2,(63/0),2,(28/0),1,(43/0),1,(109/0),1,(25/0),1,(6/0),1,(73/0),2,(9/0),2,(82/0),1,(31/0),1,(4/0),1,(23/0),1,(18/0),1,(16/0),1,(5/0),2,(16/0),1,(28/0),1,(91/0),1,(31/0),1,(16/0),1,(26/0),2,(83/0),2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2,(72/0),1,(38/0),1,(21/0),2,(232/0),2,(10/0),2,30/0

Left←(2992+⍳5),(3092+⍳8),(3192+⍳10),(3292+⍳11),(3392+⍳13),(3493+⍳13),(3594+⍳13),(3695+⍳13),(3796+⍳13),(3898+⍳11),(3999+⍳11),(4101+⍳9),4205 4206 4207 4583 4584 4585 4629 4630 4631,(4682+⍳6),(4730+⍳5),4783 4784 4785 4787 4788,(4830+⍳7),4883 4884 4885 4887 4888 4889 4930 4931 4932,(4935+⍳4),(4982+⍳9),4993 4994 4995,(5031+⍳10),(5084+⍳8),(5093+⍳4),(5132+⍳4),(5137+⍳5),5144,(5165+⍳5),(5185+⍳13),5228,(5232+⍳15),(5265+⍳7),(5286+⍳13),5328 5329 5330,(5333+⍳14),(5365+⍳8),(5388+⍳12),(5429+⍳17),(5466+⍳4),5472 5473,(5488+⍳13),(5530+⍳5),(5536+⍳11),(5566+⍳10),(5589+⍳13),(5630+⍳19),(5663+⍳14),(5689+⍳14),(5731+⍳18),(5764+⍳14),(5790+⍳14),(5832+⍳17),(5866+⍳13),(5881+⍳4),(5891+⍳14),(5933+⍳18),(5968+⍳18),(5993+⍳12),(6034+⍳18),(6068+⍳20),(6095+⍳9),(6135+⍳19),(6170+⍳19),6198 6199 6200,(6236+⍳20),(6272+⍳18),(6318+⍳6),(6337+⍳20),(6373+⍳18),(6418+⍳8),(6438+⍳20),(6474+⍳18),(6517+⍳12),(6540+⍳19),(6574+⍳19),(6618+⍳13),(6641+⍳19),(6674+⍳20),(6718+⍳14),(6743+⍳17),(6775+⍳20),(6818+⍳16),(6846+⍳14),(6876+⍳20),(6919+⍳16),(6948+⍳12),(6977+⍳19),(7020+⍳16),(7054+⍳5),(7078+⍳18),(7121+⍳16),(7179+⍳18),(7222+⍳16),(7281+⍳16),(7323+⍳16),(7383+⍳12),(7425+⍳14),(7485+⍳9),(7527+⍳13),(7628+⍳12),(7730+⍳10),7833+⍳6

Mat←3 3⍴0 0 0 0 1 0 0 1 0

Mats←(5 5⍴0 0 0 0 0 0 0 0 0 0 0 1,(4/0),1,8/0) (5 5⍴0 0 0 0 0 0 0 0 0 0 0 0 0 1,(4/0),1,6/0) (5 5⍴0 0 0 0 0 0 0 1,(4/0),1,12/0) (5 5⍴0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1,(4/0),1 0 0)

N←10

Neq←100

PixelHeight←80

PixelWidth←101

Poly←2 2⍴1 0 1 1

Polyos←(3 3⍴1 1 0 0 1,4/0) (3 3⍴0 1 1 0 1,4/0) (3 3⍴0 1 0 1 1,4/0) (3 3⍴0 1 0 0 1 1 0 0 0) (3 3⍴0 1 0 0 1 0 0 1 0) (3 3⍴1 0 0 1 1,4/0) (3 3⍴0 1 0 1 1,4/0) (3 3⍴0 0 0 1 1 1 0 0 0) (3 3⍴0 0 0 1 1 0 1 0 0) (3 3⍴0 0 0 1 1 0 0 1 0) (3 3⍴0 1 0 0 1 1 0 0 0) (3 3⍴0 0 1 0 1 1 0 0 0) (3 3⍴0 0 0 1 1 1 0 0 0) (3 3⍴0 0 0 0 1 1 0 1 0) (3 3⍴0 0 0 0 1 1 0 0 1) (3 3⍴0 1 0 0 1 0 0 1 0) (3 3⍴0 0 0 1 1 0 0 1 0) (3 3⍴0 0 0 0 1 1 0 1 0) (3 3⍴0 0 0 0 1 0 1 1 0) (3 3⍴0 0 0 0 1 0 0 1 1)

Reflections←(2 2⍴0 1 1 1) (2 2⍴1 1 1 0) (2 2⍴1 1 0 1) (2 2⍴1 0 1 1)

Rotation1←2 2⍴1 1 1 0

Rotation2←2 2⍴1 1 0 1

Rotation3←2 2⍴0 1 1 1

Rotations←(2 2⍴1 0 1 1) (2 2⍴1 1 1 0) (2 2⍴1 1 0 1) (2 2⍴0 1 1 1)

Seed←(1 3⍴1) (2 2⍴1 0 1 1)

Top←(2892+⍳5),(2992+⍳8),(3092+⍳10),(3192+⍳11),(3292+⍳13),(3393+⍳13),(3494+⍳13),(3595+⍳13),(3696+⍳13),(3798+⍳11),(3899+⍳11),(4001+⍳9),4105 4106 4107 4483 4484 4485 4529 4530 4531,(4582+⍳6),(4630+⍳5),4683 4684 4685 4687 4688,(4730+⍳7),4783 4784 4785 4787 4788 4789 4830 4831 4832,(4835+⍳4),(4882+⍳9),4893 4894 4895,(4931+⍳10),(4984+⍳8),(4993+⍳4),(5032+⍳4),(5037+⍳5),5044,(5065+⍳5),(5085+⍳13),5128,(5132+⍳15),(5165+⍳7),(5186+⍳13),5228 5229 5230,(5233+⍳14),(5265+⍳8),(5288+⍳12),(5329+⍳17),(5366+⍳4),5372 5373,(5388+⍳13),(5430+⍳5),(5436+⍳11),(5466+⍳10),(5489+⍳13),(5530+⍳19),(5563+⍳14),(5589+⍳14),(5631+⍳18),(5664+⍳14),(5690+⍳14),(5732+⍳17),(5766+⍳13),(5781+⍳4),(5791+⍳14),(5833+⍳18),(5868+⍳18),(5893+⍳12),(5934+⍳18),(5968+⍳20),(5995+⍳9),(6035+⍳19),(6070+⍳19),6098 6099 6100,(6136+⍳20),(6172+⍳18),(6218+⍳6),(6237+⍳20),(6273+⍳18),(6318+⍳8),(6338+⍳20),(6374+⍳18),(6417+⍳12),(6440+⍳19),(6474+⍳19),(6518+⍳13),(6541+⍳19),(6574+⍳20),(6618+⍳14),(6643+⍳17),(6675+⍳20),(6718+⍳16),(6746+⍳14),(6776+⍳20),(6819+⍳16),(6848+⍳12),(6877+⍳19),(6920+⍳16),(6954+⍳5),(6978+⍳18),(7021+⍳16),(7079+⍳18),(7122+⍳16),(7181+⍳16),(7223+⍳16),(7283+⍳12),(7325+⍳14),(7385+⍳9),(7427+⍳13),(7528+⍳12),(7630+⍳10),7733+⍳6

Transformations←(2 2⍴1 0 1 1) (2 2⍴1 1 1 0) (2 2⍴1 1 0 1) (2 2⍴0 1 1 1) (2 2⍴0 1 1 1) (2 2⍴1 1 1 0) (2 2⍴1 1 0 1) (2 2⍴1 0 1 1)

X←2

g1←19.9

g2←37.43389

g3←63.1969116741469

g4←88.78116841905931

g5←99.73739915563743

g6←100.02550153319821

g7←99.99744269307003

g8←100.000255658755

g9←99.99997443340553

img001←8 10⍴(,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,1) (,1) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,1) (,1) (,1) (,1) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,1) (,1) (,1) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0) (,0)

img002←80 100⍴(2963/8),(5/11),(94/8),(8/11),(91/8),(10/11),(89/8),(11/11),(88/8),(13/11),(87/8),(13/11),(87/8),(13/11),(87/8),(13/11),(87/8),(13/11),(88/8),(11/11),(89/8),(11/11),(90/8),(9/11),(93/8),7 3 3 3 7,(370/8),11 11 11,(43/8),11 11 11,(49/8),(6/11),(42/8),(5/11),(47/8),11 11 0 8 11 11,(41/8),(7/11),(45/8),11 11 11 8 11 11 11,(40/8),11 11 11 7 8,(4/11),(42/8),3,(8/11),8 8 11 11 11,(35/8),11 11 11 3 15 0,(4/11),(42/8),1 3 3,(5/11),8,(4/11),(35/8),(4/11),8 15,(4/11),8 8 11,(19/8),(5/11),(15/8),1 1 1,(10/11),(30/8),11 8 8 8,(15/11),(17/8),(7/11),(14/8),3 3,(11/11),(29/8),11 11 11 8 8,(12/11),3 3,(17/8),(8/11),(15/8),(12/11),(29/8),(5/11),15,(10/11),3,(19/8),11 11 11 3 8 8 11 11,(14/8),(13/11),(29/8),(5/11),8,(8/11),3 3 1,(18/8),(4/11),0 15,(4/11),(13/8),(13/11),(28/8),(15/11),3 3 1 3,(13/8),(8/11),15,(5/11),(12/8),(14/11),(28/8),(17/11),3 7,(13/8),3,(13/11),(12/8),(14/11),(28/8),(17/11),(16/8),3 3,(11/11),8 8,(4/11),(6/8),(14/11),(28/8),(18/11),(16/8),1 1 3 3,(14/11),(7/8),(12/11),(29/8),(18/11),(15/8),3 1 1 1 3,(15/11),(6/8),7,(8/11),3,(31/8),(19/11),(14/8),7 3 3 3,(16/11),(8/8),7 3 3 3 7,(34/8),(20/11),(15/8),(18/11),(28/8),(6/11),(13/8),(20/11),(15/8),(18/11),(27/8),(8/11),(12/8),(20/11),(15/8),(18/11),(25/8),(12/11),(11/8),(19/11),(14/8),(19/11),(25/8),(13/11),(10/8),(19/11),(13/8),(20/11),(24/8),(14/11),(11/8),(17/11),(14/8),(20/11),(23/8),(16/11),(12/8),(14/11),7,(14/8),(20/11),(23/8),(16/11),(13/8),(7/11),(5/3),7,(15/8),(19/11),(24/8),(16/11),(17/8),7,(5/3),7 7,(16/8),(18/11),(25/8),(16/11),(41/8),(18/11),(25/8),(16/11),(42/8),(16/11),(26/8),(16/11),(42/8),7,(11/11),3 7,(29/8),(14/11),(44/8),7,(9/11),7,(32/8),(13/11),(87/8),(12/11),(89/8),(8/11),3 3,(92/8),(4/11),3 3,238/8

model←2 6⍴' 50.00' ' 57.50' ' 63.97' ' 68.14' ' 68.97' ' 65.84' ' 0.20' ' 0.20' ' 0.23' ' 0.29' ' 0.40' ' 0.55'

p1←1 1⍴1

p2←2 3⍴1 1 1 0 1 0

p3←2 3⍴1 0 1 0 1 0

p4←3 3⍴(4/1),0,4/1


⍝ === End of variables definition ===

⎕IO ⎕ML ⎕WX ⎕PP←1 0 3 5

∇ r←island BunnyFox(gen Neq R S C);B;Q;CurrentGen;NewIsland
      ⍝ 2013 APL Problem Solving Competition stub function for Biology High Difficulty Problem
      ⍝ Solution by Christopher Zhang
      ⍝ Derived constants
 B←(R-1)÷Neq
 Q←S÷Neq
 CurrentGen←2
 NewIsland←island
 :While (∨/∨/NewIsland[1;;])∧(∨/∨/NewIsland[2;;])∧(CurrentGen≤gen) ⍝ While neither of species have perished until all generations are complete
     NewIsland←NewIsland OneGenIsland(Neq R S C B Q)
     NewIsland←(Migrate NewIsland[1;;]),[0.5](Migrate NewIsland[2;;])
 :EndWhile
 r←NewIsland
∇

∇ r←{params}Chart data;max;min;values;n;i;two;height;x1tik;x2tik;x1mat;x2mat;ljust
     ⍝ Chart 1 or 2 series, scaling to fit
 ljust←{(+/∧\' '=⍵)⌽⍵} ⍝ Left-justify rows of a matrix
 :If 0=⎕NC'params' ⋄ params←⍬ ⋄ :EndIf
 height←⊃params,(⍴params)↓19 ⍝ Height of chart area (#rows) - default 19
 data←(¯2↑1 1,⍴data)⍴data    ⍝ Make matrix
 (x1tik x1mat)←height chart1Series data[1;]
 :If two←2=1↑⍴data
     (x2tik x2mat)←height chart1Series data[2;]
     r←x1tik,(' *○⍟'[1+x1mat+2×x2mat]),x2tik[;2⊃⍴x2tik],ljust 0 ¯1↓x2tik
 :Else
     r←x1tik,' *'[1+x1mat]
 :EndIf
∇

∇ R←DeadNeighbors Matrix;Mat;Mats
      ⍝ A helper function by Christopher Zhang
      ⍝ Returns a matrix with 1s for each 0 cell that bordered a 1 cell in the input
     
      ⍝ Pad a square frame of zeroes around the matrix
 Mat←Matrix,[2]0
 Mat←0,[2]Mat
 Mat←Mat,[1]0
 Mat←0,[1]Mat
     
      ⍝Shift the matrix right, left, up, and down
 Mats←(1 ¯1⌽¨⊂Mat),(1 ¯1⊖¨⊂Mat)
     
 Mat←(~Mat)∧⊃∨/Mats ⍝ Or all the shifted matrices and isolate cells that were formerly 0
     
 Mat←1 1↓Mat ⍝ Peel off the parts of the frame that are not relevant
 Mat←¯1 ¯1↓Mat
 R←Mat
∇

∇ r←FindCG img;numPoints;nRows;nColumns;xArray;yArray
     
      ⍝ 2013 APL Problem Solving Competition stub function for Engineering Low Difficulty Problem
      ⍝ Solution by Christopher Zhang
     
 numPoints←+/+/img ⍝ The center of gravity is the average x-coordinate and the average y-coordinate so the total number of points is needed
     
 nRows nColumns←⍴img ⍝ Store the length and width of the image
      ⍝ Create a matrix of the same shape as the image with x-coordinate values corresponding to each position
 xArray←(⍳nColumns÷2)-0.5
 xArray←(-⌽xArray),xArray
 xArray←nRows nColumns⍴xArray
 xArray×←img ⍝ Multiply it to the boolean original to obtain a matrix of all the needed x-coordinates
     
      ⍝ Create a matrix of the same shape as the image with y-coordinate values corresponding to each position
 yArray←(⍳nRows÷2)-0.5
 yArray←(-⌽yArray),yArray
 yArray←nColumns nRows⍴yArray
 yArray←⊖⍉yArray
 yArray×←img ⍝ Multiply it to the boolean original to obtain a matrix of all the needed y-coordinates
     
 r←⊃¨((+/+/xArray),(+/+/yArray))÷(numPoints) ⍝ Display the average
∇

∇ Return←FindDucks Image;ImageCopy;Background1;Background2;ImageVec;ImageMatrix;Objects;Answer;NumOfDucks;A;GlobRowNumbers;GlobY;LowestObservedYellowPointIndex;Glob;LowestObservedYellowPoint;ThisForward;ThisHeight;ThisLeftRight;GlobColNumbers;GlobX
      ⍝ 2013 APL Problem Solving Competition stub function for Engineering High Difficulty Problem
      ⍝ Solution by Christopher Zhang
      ⍝ Note that the output differs and due to the number of ways of defining which pixels to consider as part of the duck, some commented code offers ways to consider other methods.
 ImageCopy←Image ⍝ Avoid side-effects, per usual
 Background1←8 ⍝ The background colors (a variable for the color of the room)
 Background2←7
     ⍝ The 3 comments after this one are for if background-colored flecks appear on the surface of the duck and they are to be counted as part of the duck
     ⍝ ChunkData←GlobPicker ImageCopy=8
     ⍝ FakeBG←⊃,/ChunkData~(ChunkData[(⍴¨ChunkData)⍳(⌈/⍴¨ChunkData)])
 ImageVec←,(ImageCopy,[2]8)
     ⍝ ImageVec[FakeBG]←¯1  ⍝ Set parts of the duck the same shade as the background to a distinct shade from the background
 ImageMatrix←(80 101)⍴ImageVec ⍝ Dealing with neighbors again, so padding is required
 ImageMatrix←¯1↓[2]ImageMatrix
 Objects←GlobPicker((ImageMatrix≠Background1)∧(ImageMatrix≠Background2)) ⍝ Identify all non-background objects (balls and ducks)
 Answer←⍬ ⍝ Answer accumultaor
 NumOfDucks←0 ⍝ Number of rows for output
 :For Glob :In Objects
     A←ImageVec[Glob]
     :If ∧/(1 0∊A) ⍝ If a connected object contains the colors black and red, it is a duck
         NumOfDucks+←1
         GlobRowNumbers←1+⌊¨Glob÷101 ⍝ Find which row each point of the duck sits on
         GlobY←(((⌽⍳40)-0.5),(-⍳40)+0.5)[GlobRowNumbers] ⍝ Each point in a duck is now its y-coordinate
              ⍝ The closest to the example output I was able to obtain was to count the brown below each duck as part of the duck but the lowest point as the lowest observed yellow
         LowestObservedYellowPointIndex←Glob[+/ImageVec[Glob]=11]
         LowestObservedYellowPoint←(1+⌊LowestObservedYellowPointIndex÷101)-39.5
         ThisForward←-5000÷((-LowestObservedYellowPoint)+(+/GlobY)÷⍴GlobY)÷2 ⍝ Similar triangle proportion akin to the Locate function
     
         ThisHeight←(100×(5000÷(-⌈/GlobY))-ThisForward)÷(5000÷(-⌈/GlobY))
     
              ⍝ The method I used was to consider the highest observed point of every duck as "the ground", which meant extending a line from the camera through the point to the ground.
              ⍝ This created a triangle. This triangle is similar to the triangle created by the top of the object, the bottom of the object, and the point on the ground from the line extension of the top of the duck.
              ⍝ Similarity can be proven because they share two angles.
              ⍝ Therefore the ratio of 10 cm (height of camera) to the forward distance of the top point considered as the ground is equal to the ratio of the height of the object to the difference between the forward distance of the top of the duck versus the actual bottom of the duck that touches the ground
         GlobColNumbers←Glob-101×GlobRowNumbers-1
         GlobX←(((-⌽⍳50)+0.5),(⍳50)-0.5)[GlobColNumbers] ⍝ Every point in the duck is now its x-coordinate
         ThisLeftRight←(ThisForward×(+/GlobX)÷(⍴GlobX))÷500 ⍝ Use the forward distance and the similar triangles visualization
     
         Answer,←ThisLeftRight(ThisForward÷10)(ThisHeight÷10) ⍝ Catenate each duck's information to a final answer
     :EndIf
 :EndFor
 Return←NumOfDucks 3⍴⊃¨Answer ⍝ Reshape and return the result
∇

∇ r←Generation GenX(B Neq N);Temp
      ⍝ Second half of the 2013 APL Problem Solving Competition stub function for Biology Low Difficulty Problem
      ⍝ Solution by Christopher Zhang
      ⍝ A recursive, non-looping solution that relies on calculating the previous generation to obtain the current result
 :Trap 11 ⍝ A guard against DOMAIN ERROR is applied
     :If (Generation<2)
         r←0⌈N×1-B×N-Neq
     :Else
         Temp←((Generation-1)GenX B Neq N)
         r←0⌈Temp×1-B×Temp-Neq
     :EndIf
 :Else
     r←⌊/⍬
 :EndTrap
∇

∇ Return←GlobPicker Image;PixelHeight;PixelWidth;IndicesMat;BinImage;Cells;Left;Top;CellsWithLeftNeighbs;CellsWithTopNeighbs;CellsWithTopAndLeftNeighbs;CellsWithOnlyLeftNeighbs;CellsWithOnlyTopNeighbs;CellsWithNoTopLeftNeighbs;Globs;Cell;ClustersVec;GlobN
      ⍝ A helper function by Christopher Zhang
      ⍝ Given a matrix, it returns a nested array where each element is the vector of indices that are connected edge-to-edge
      ⍝ Similar logic to ValidPoly with an organizer loop at the end
 PixelHeight PixelWidth←⍴Image
 PixelWidth+←1
 IndicesMat←PixelHeight PixelWidth⍴⍳((PixelWidth)×PixelHeight)
 Image,[2]←0
 BinImage←Image
 IndicesMat∧←BinImage
 Cells←(,IndicesMat)~0
 Left←Cells-1
 Top←Cells-PixelWidth
 CellsWithLeftNeighbs←(Left∊Cells)/Cells
 CellsWithTopNeighbs←(Top∊Cells)/Cells
 CellsWithTopAndLeftNeighbs←CellsWithLeftNeighbs∩CellsWithTopNeighbs
 CellsWithOnlyLeftNeighbs←CellsWithLeftNeighbs~CellsWithTopNeighbs
 CellsWithOnlyTopNeighbs←CellsWithTopNeighbs~CellsWithLeftNeighbs
 CellsWithNoTopLeftNeighbs←Cells~(CellsWithTopAndLeftNeighbs∪CellsWithTopNeighbs∪CellsWithLeftNeighbs)
 Globs←(⍴Cells)⍴0
 Globs[Cells⍳CellsWithNoTopLeftNeighbs]←⍳⍴CellsWithNoTopLeftNeighbs
 :For Cell :In Cells
     :If Cell∊CellsWithOnlyLeftNeighbs
         Globs[Cells⍳Cell]←Globs[(Cells⍳Cell)-1]
     :ElseIf Cell∊CellsWithOnlyTopNeighbs
         Globs[Cells⍳Cell]←Globs[Cells⍳(Cell-PixelWidth)]
     :ElseIf Cell∊CellsWithTopAndLeftNeighbs
         :If Globs[(Cells⍳Cell)-1]≠Globs[Cells⍳(Cell-PixelWidth)]
             Globs[Cells⍳Cell]←Globs[(Cells⍳Cell)-1]⌊Globs[Cells⍳(Cell-PixelWidth)]
             Globs[(Globs=Globs[Cells⍳(Cell-PixelWidth)]⌈Globs[Cells⍳Cell]←Globs[(Cells⍳Cell)-1])/⍳⍴Globs]←Globs[Cells⍳Cell]
         :Else
             Globs[Cells⍳Cell]←Globs[(Cells⍳Cell)-1]
         :EndIf
     :EndIf
 :EndFor
 ClustersVec←⍬
 :For GlobN :In ((Globs⍳Globs)=⍳⍴Globs)/Globs ⍝ Go through each glob, without duplicates
     ClustersVec,←⊂(Globs=GlobN)/Cells ⍝ Catenate the "bagged" or enclosed cells that share a glob
 :EndFor
 Return←ClustersVec
∇

∇ r←Locate img;CameraHeight;DistanceToVirtualImage;CG;PixelCol;XVec;ColumnOfCG;LowestObsPoint;Ground;Forward;LeftRight
     
      ⍝ 2013 APL Problem Solving Competition stub function for Engineering Medium Difficulty Problem
      ⍝ Solution by Christopher Zhang
     
      ⍝ Constants about the geometry of the setup
 CameraHeight←10
 DistanceToVirtualImage←5
     
      ⍝ Use function defined in the low difficulty Problem to find the center of gravity of the one object
 CG←FindCG img
     
 PixelCol←0.5+⌊(1⊃CG) ⍝ If the x-value of the center of gravity is between two coordinate integers, consider the column occupying the midpoint as vertically below it
 XVec←(0.5+⌽-⍳(2⊃⍴img)÷2),(¯0.5+⍳(2⊃⍴img)÷2) ⍝ Construct a vector of all possible x-coordinates in appropriate left-right order
 ColumnOfCG←img[;XVec⍳PixelCol] ⍝ Obtain the column that contains the center of gravity
 LowestObsPoint←⌊/ColumnOfCG×((⌽¯0.5+⍳(1⊃⍴img)÷2),(0.5+-⍳(1⊃⍴img)÷2)) ⍝ The lowest observed point is the minimum y value of the column
 Ground←(LowestObsPoint+2⊃CG)÷2 ⍝ According to the second assumption, find the point halfway between the center of gravity and the lowest observed point
     
      ⍝ When looking at the setup from the side and constructing a triangle from the object's point on the ground to the camera to the ground below the camera, there is a right triangle.
      ⍝ The virtual image 5 centimeters in front of the camera intersects the hypotenuse of this triangle at a point. If this point is extended horizontally to the right another triangle can be formed.
      ⍝ The height of this new triangle is equal to the offset of the object from the x-axis, also known as its y-coordinate. The length of this triangle is 5.
      ⍝ Simple geometry allows the statement that the two triangles are similar (sharing two angles). Therefore, the ratio of the length of one triangle to its height should equal that of the other triangle.
      ⍝ That is, 5 to Y-Coordinate must equal 10 to Forward Distance. Cross-multiplication allows for a simple mathematical solution.
 Forward←⊃¨|(CameraHeight×DistanceToVirtualImage)÷Ground ⍝ Absolute value is necessary since all possible values must be positive.
     
      ⍝ If the view is changed to a bird's-eye perspective, a triangle can be constructed with vertices at the camera, the object, and a point directly in front of the camera at the same forward distance from it as the object.
      ⍝ Another triangle is formed by the two intersections with the virtual image and the camera itself. Again, the triangles are similar because they share two angles.
      ⍝ The ratio of 5 to the offset from the y-axis, also known as the x-coordinate is the ratio of the forward distance found above to the left/right displacement.
 LeftRight←⊃(Forward×1⊃CG)÷DistanceToVirtualImage ⍝ Omit absolute value here as values may be positive or negative.
 r←LeftRight Forward
∇

∇ r←MatSplicer Matrix;NumOnes;IdentityMatrix
      ⍝ A helper function by Christopher Zhang
      ⍝ Given a matrix of n number of 1s, the function will split the matrix into n matrices containing only one 1 each so that if all of these submatrices are OR-ed together, the original is returned
 NumOnes←+/,Matrix ⍝ How many 1s are there?
 IdentityMatrix←NumOnes NumOnes⍴1,NumOnes⍴0 ⍝ Get the identity matrix of rank NumOnes
 ExpandedMatrix←(,Matrix)\IdentityMatrix ⍝ The 'scan' operator is used to expand the identity matrix; now each row is the raveled form the matrices that have only one 1 in them
 r←(⍴Matrix)∘⍴¨⊂[2]ExpandedMatrix ⍝ Simply reshape each of these rows using the original input shape
∇

∇ R←Migrate Matrix;TopLeftMASK;TopLeftM;TLeftValidNebs;TopRightMASK;TopRightM;TRightValidNebs;TopRowMASK;TopRowM;TRowValidNebs;BotLeftMASK;BotLeftM;BLeftValidNebs;BotRightMASK;BotRightM;BRightValidNebs;RightColMASK;RightColM;LeftColMASK;LeftColM;RCValidNebs;LCValidNebs;BotRowMASK;BotRowM;BRValidNebs;MiddleMASK;MiddleM;MValidNebs;PaddedMatrix;RowLength;IndicesMatrix;Critters;Migrants;PossibleNeighborsOfMigrants;Indices;ValidNebsOfMigs;NumOfNebsPerMig;RandomDirections;FinalDestinations;Critters1DMat;Migrants1DMat;Destinations1DMat
     
      ⍝ A helper function by Christopher Zhang
     
 PaddedMatrix←Matrix,[2]0
 RowLength←(⍴PaddedMatrix)[2]
 IndicesMatrix←(⍴PaddedMatrix)⍴(⍳×/⍴PaddedMatrix)
 Critters←(,PaddedMatrix)/(,IndicesMatrix)
     
      ⍝ Determine randomly which individuals will migrate
 Migrants←?(⍴Critters)/2
 Migrants←(Migrants=2)/Critters ⍝ Critters in these index boxes will be migrating
     
      ⍝ Exceedingly rare bug was found that occured when no individual chanced to migrate
 :If 1<⍴Migrants
         ⍝ Randomly roll a destination per migrant out of all possible destinations per migrant
     PossibleNeighborsOfMigrants←Migrants+⊂(1 ¯1 RowLength(-RowLength)(RowLength+1)(RowLength-1)(-RowLength-1)(-RowLength+1)) ⍝ Where row length is the number of columns in the padded matrix
     Indices←0 ¯1↓IndicesMatrix
          ⍝ One optimization is instead of validate possible neighbors for each migrant, to split migrants into categories based on their location
          ⍝ From this, it is possible to automatically determine which neighbors are valid without computation
          ⍝ Top left corner migrants
     TopLeftMASK←Migrants=1
     TopLeftM←TopLeftMASK/Migrants
     TLeftValidNebs←TopLeftM+⊂(1 RowLength(RowLength+1)) ⍝ Its 3 valid neighbors: East, South, and Southeast
          ⍝ Top right corner migrants
     TopRightMASK←Migrants=RowLength-1
     TopRightM←TopRightMASK/Migrants
     TRightValidNebs←TopRightM+⊂(¯1 RowLength(RowLength-1)) ⍝ Its 3 valid neighbors: West, South, and Southwest
          ⍝ Top row migrants (without corners)
     TopRowMASK←(Migrants<RowLength-1)∧Migrants>1
     TopRowM←TopRowMASK/Migrants
     TRowValidNebs←TopRowM+⊂(¯1 1 RowLength(RowLength-1)(RowLength+1)) ⍝ Its 5 valid neighbors: West, East, South, Southwest, and Southeast
          ⍝ Bot left corner migrants
     BotLeftMASK←Migrants=(¯1↑Indices)[;1]
     BotLeftM←BotLeftMASK/Migrants
     BLeftValidNebs←BotLeftM+⊂((-RowLength)(-RowLength-1)1) ⍝ Its 3 valid neighbors: North, Northeast, and East
          ⍝ Bot right corner migrants
     BotRightMASK←Migrants=(¯1↑Indices)[;RowLength-1]
     BotRightM←BotRightMASK/Migrants
     BRightValidNebs←BotRightM+⊂((-RowLength)(-RowLength+1)¯1) ⍝ Its 3 valid neighbors: North, Northwest, and West
          ⍝ Left column migrants
     LeftColMASK←((Migrants<(¯1↑Indices)[;1])∧(Migrants>1)∧(RowLength|(Migrants-1))=0)
     LeftColM←LeftColMASK/Migrants
     LCValidNebs←LeftColM+⊂((-RowLength)1 RowLength(-RowLength-1)(RowLength+1)) ⍝ Its 5 neighbors: North, East, South, Northeast, and Southeast
          ⍝ Right column migrants
     RightColMASK←((Migrants<(×/⍴PaddedMatrix)-1)∧(Migrants>RowLength)∧(RowLength|(Migrants+1))=0)
     RightColM←RightColMASK/Migrants
     RCValidNebs←RightColM+⊂((-RowLength)¯1 RowLength(-RowLength+1)(RowLength-1)) ⍝ Its 5 valid neighbors: North, West, South, Northwest, and Southwest
          ⍝ Bot row migrants (without corners)
     BotRowMASK←(Migrants>(¯1↑Indices)[;1])∧(Migrants<(×/⍴PaddedMatrix)-1)
     BotRowM←BotRowMASK/Migrants
     BRValidNebs←BotRowM+⊂((-RowLength)1 ¯1(-RowLength+1)(-RowLength-1)) ⍝ Its 5 valid neighbors: North, East, West, Northwest, and Northeast
          ⍝ Every migrant in the middle
     MiddleMASK←⊃~(∨/TopLeftMASK TopRightMASK TopRowMASK BotLeftMASK BotRightMASK LeftColMASK RightColMASK BotRowMASK)
     MiddleM←MiddleMASK/Migrants
     MValidNebs←MiddleM+⊂(1 ¯1 RowLength(-RowLength)(RowLength+1)(RowLength-1)(-RowLength-1)(-RowLength+1)) ⍝ Its 9 valid neighbors in every possible direction
     
     ValidNebsOfMigs←(TLeftValidNebs),(TRightValidNebs),(TRowValidNebs),(BLeftValidNebs),(BRightValidNebs),(LCValidNebs),(RCValidNebs),(BRValidNebs),(MValidNebs)
     NumOfNebsPerMig←⊃¨⍴¨ValidNebsOfMigs
     RandomDirections←?NumOfNebsPerMig ⍝ Choose which of the possible neighbors to migrate to
     FinalDestinations←RandomDirections⌷¨ValidNebsOfMigs
     
         ⍝ Every migrant will be leaving its original position
     Critters1DMat←+/¨(⍳×/⍴PaddedMatrix)=⊂Critters
     
         ⍝ Here is a matrix representation of migrants
     Migrants1DMat←+/¨(⍳×/⍴PaddedMatrix)=⊂Migrants
     
         ⍝ Here is a matrix representation of the destinations
     Destinations1DMat←+/¨(⍳×/⍴PaddedMatrix)=⊂FinalDestinations
     
         ⍝ Remove migrants from their current locations and increase inhabitants at new destinations
     R←0 ¯1↓(⍴PaddedMatrix)⍴Destinations1DMat+Critters1DMat-Migrants1DMat ⍝ Reshape to the shape of the padded matrix and remove the last column which will always be filled with 0s
 :Else
     R←Matrix ⍝ Nothing migrated
 :EndIf
∇

∇ r←NextGen(B Neq N)
     
      ⍝ 2013 APL Problem Solving Competition stub function for Biology Low Difficulty Problem
      ⍝ Solution by Christopher Zhang
     
 :Trap 11 ⍝ 11 corresponds to the possible DOMAIN ERROR for a population that grows into infinity
     r←0⌈N×1-B×N-Neq ⍝ The equation given can be condensed and expressed as so with a floor of 0 applied in case of a negative solution
 :Else
     r←⌊/⍬ ⍝ If the domain error would indeed have occured, return the highest value expressable in this implementation of APL
 :EndTrap
∇

∇ Return←FoxesAndBunnies OneGenIsland(Neq R S C B Q);⎕DIV;Bunnies;Foxes;BunniesPopD;FoxesPopD;ProjBunniesPopD;ProjFoxesPopD;BunniesVec;BunniesPopDVec;ProjBunniesPopDVec;BunnyNation;BunnyPopDs;BunnyProjPopDs;BunnyDifference;BunnyGrowth;BunnyDeath;BunnyProbabilityToRepro;BunnyProbabilityToDie;FoxesVec;FoxesPopDVec;ProjFoxesPopDVec;FoxNation;FoxPopDs;FoxProjPopDs;FoxDifference;FoxGrowth;FoxDeath;FoxProbabilityToRepro;FoxProbabilityToDie;BunnyRollRepro;BunnyProcreate;BunnyRollDie;BunnyDie;FoxRollRepro;FoxProcreate;FoxRollDie;FoxDie;FoxSurvivors;BunnySurvivors;NewFoxes;NewBunnies;AdditionalNewBunnies;AdditionalNewFoxes;FinalNewBunnies;FinalNewFoxes;BR;FR
     
      ⍝ A helper function by Christopher Zhang
     
 Bunnies←FoxesAndBunnies[1;;]
 Foxes←FoxesAndBunnies[2;;]
 BunniesPopD←PopD Bunnies
 FoxesPopD←PopD Foxes
     
 ProjBunniesPopD←(BunniesPopD×1-B×BunniesPopD-Neq)-(C×BunniesPopD×FoxesPopD)
 ProjFoxesPopD←Q×BunniesPopD×FoxesPopD
     
 ⎕DIV←1
     
      ⍝ Turn data into a 1 dimensional vector
 BunniesVec←,Bunnies
 BunniesPopDVec←,BunniesPopD
 ProjBunniesPopDVec←,ProjBunniesPopD
     
      ⍝ Each bunny is unique by their position in the vector
      ⍝ Create a vector of bunnies using replication and the appropriate position
      ⍝ Bunnies must be uniquely identified because rolls are done for each individual
 BunnyNation←BunniesVec/⍳⍴BunniesVec ⍝ Each element is a bunny
      ⍝ For each bunny associate it with the appropriate population density of its part of the island
 BunnyPopDs←BunniesVec/BunniesPopDVec
      ⍝ Do the same for its projected population density
 BunnyProjPopDs←BunniesVec/ProjBunniesPopDVec
      ⍝ Now each position in the above vectors corresponds to a particular bunny
     
 BunnyDifference←BunnyProjPopDs-BunnyPopDs
 BunnyGrowth←(BunnyDifference)>0 ⍝ 1s for parts of island where population will grow
 BunnyDeath←(BunnyDifference)<0 ⍝ 1s for parts of island where population will decrease
      ⍝ Two "mask" vectors are defined (it does not suffice to simply NOT BunnyGrowth because some parts of the island may not experience change
     
      ⍝ Probabilities are rounded to the nearest whole number (.5 rounded to 1)
 BunnyProbabilityToRepro←|⌊0.5+100×(BunnyGrowth×BunnyDifference)÷BunnyPopDs ⍝ After isolating differences between greater projected populations than the prior generation, find probability of procreation
 BunnyProbabilityToDie←|⌊0.5+|100×(BunnyDeath×BunnyDifference)÷BunnyPopDs
      ⍝ The position of each element of these two vectors now corresponds to the likelihood of reproduction or death
     
      ⍝ Repeat for foxes
 FoxesVec←,Foxes
 FoxesPopDVec←,FoxesPopD
 ProjFoxesPopDVec←,ProjFoxesPopD
     
      ⍝ Each fox is unique by their position in the vector
      ⍝ Create a vector of foxes using replication and the appropriate position
 FoxNation←FoxesVec/⍳⍴FoxesVec ⍝ Each element is a fox
      ⍝ For each fox associate it with the appropriate population density of its part of the island
 FoxPopDs←FoxesVec/FoxesPopDVec
      ⍝ Do the same for its projected population density
 FoxProjPopDs←FoxesVec/ProjFoxesPopDVec
      ⍝ Now each position in the above vectors corresponds to a particular fox
     
 FoxDifference←FoxProjPopDs-FoxPopDs
 FoxGrowth←(FoxDifference)>0 ⍝ 1s for parts of island where population will grow
 FoxDeath←(FoxDifference)<0 ⍝ 1s for parts of island where population will decrease
      ⍝ Two "mask" vectors are defined (it does not suffice to simply NOT BunnyGrowth because some parts of the island may not experience change
     
      ⍝ Probabilities are rounded to the nearest whole number
 FoxProbabilityToRepro←|⌊0.5+100×(FoxGrowth×FoxDifference)÷FoxPopDs ⍝ After isolating differences between greater projected populations than the prior generation, find probability of procreation
 FoxProbabilityToDie←|⌊0.5+100×(FoxDeath×FoxDifference)÷FoxPopDs
      ⍝ The position of each element of these two vectors now corresponds to the likelihood of reproduction or death
     
      ⍝ Roll a value between 1 and 100 for each bunny
      ⍝ If the roll is less than or equal to the probability, action is taken (later code)
 BunnyRollRepro←?(⍴BunnyProbabilityToRepro)/100
 BunnyProcreate←BunnyRollRepro≤BunnyProbabilityToRepro ⍝ Each 1 in this vector means that particular bunny procreates
     
 BunnyRollDie←?(⍴BunnyProbabilityToDie)/100
 BunnyDie←BunnyRollDie≤BunnyProbabilityToDie ⍝ Each 1 in this vector means that particular bunny dies
     
 FoxRollRepro←?(⍴FoxProbabilityToRepro)/100
 FoxProcreate←FoxRollRepro≤FoxProbabilityToRepro
     
 FoxRollDie←?(⍴FoxProbabilityToDie)/100
 FoxDie←FoxRollDie≤FoxProbabilityToDie
     
      ⍝ DEATH
     
      ⍝ Because procreation is a little complicated, first kill the bunnies and foxes that have chanced to die
 FoxSurvivors←(~FoxDie)/FoxNation
 BunnySurvivors←(~BunnyDie)/BunnyNation
     
      ⍝ LIFE
     
      ⍝ If a bunny chances to procreate, create vectors to represent the 1 descendant (complex cases dealt with later)
 NewFoxes←FoxProcreate/FoxNation ⍝ If the rolls are equal to or less than the probability, then procreate (+1)
 NewBunnies←BunnyProcreate/BunnyNation
      ⍝ Fox and bunny babies are assumed to live in the same cell as their parents
     
 BunnyProbabilityToRepro←400⌊BunnyProbabilityToRepro
 FoxProbabilityToRepro←200⌊FoxProbabilityToRepro
     
      ⍝ Find the remainder when divided by 100 from all the reproductive probabilities and roll again
      ⍝ It's important to subtract 100 (floor at 0) at first so values like 91 will not be rolled again
 AdditionalNewBunnies←100|(0⌈BunnyProbabilityToRepro-100)
 AdditionalNewBunnies←((?(⍴AdditionalNewBunnies)/100)≤AdditionalNewBunnies)/BunnyNation
     
 AdditionalNewFoxes←100|(0⌈FoxProbabilityToRepro-100)
 AdditionalNewFoxes←((?(⍴AdditionalNewFoxes)/100)≤AdditionalNewFoxes)/FoxNation
     
      ⍝ How many 100s can fit into the probability? Now subtract 1.
 FinalNewBunnies←((⌊(BunnyProbabilityToRepro÷100)-1)⌈0)/BunnyNation ⍝ Subtracting 1 is necessary since the position will be increased by 1 by the first test
 FinalNewFoxes←((⌊(FoxProbabilityToRepro÷100)-1)⌈0)/FoxNation ⍝ Subtracting 1 is necessary since the position will be increased by 1 by the first test
     
      ⍝ Gather the young and the survivors
 BR←BunnySurvivors,NewBunnies,AdditionalNewBunnies,FinalNewBunnies
 FR←FoxSurvivors,NewFoxes,AdditionalNewFoxes,FinalNewFoxes
 BR←(⍴Bunnies)⍴⊃+/BR=⊂⍳(×/⍴Bunnies)
 FR←(⍴Foxes)⍴⊃+/FR=⊂⍳(×/⍴Foxes)
 Return←BR,[0.5]FR
∇

∇ r←OutcomeType p;possibilities;preyPop;predatorPop;typeFinder
      ⍝ 2013 APL Problem Solving Competition stub function for Biology Medium Difficulty Problem 2
      ⍝ Solution by Christopher Zhang
     
      ⍝ Use an array of possibilities and return the index of the correct answer
 possibilities←'equilibrium' 'oscillation' 'convergent' 'divergent' 'none'
     
 preyPop←p[1;]
 predatorPop←p[2;]
     
 typeFinder←{firstHalf←|(⌊(⍴⍵)÷2)↑⍵
     secondHalf←|(⌊(⍴⍵)÷2)↓⍵
     (⍵≡⍵[⍋⍵])∨(⍵≡⍵[⍒⍵]):1
     (⌈/firstHalf)=(⌈/secondHalf):2
     (⌈/firstHalf)>(⌈/secondHalf):3
     (⌈/firstHalf)<(⌈/secondHalf):4
     5 ⍝ Yielding this value is impossible and time can be saved by omitting any one test and have it as simply the none-of-the-above
          ⍝ However, this is poor practice for code maintenance
 }
 :If (typeFinder preyPop)=(typeFinder predatorPop)
     r←possibilities[typeFinder preyPop]
 :Else ⍝ In the odd chance that predator data differs
     r←'predator curve shows ',possibilities[typeFinder predatorPop],' while prey curve shows ',possibilities[typeFinder preyPop]
 :EndIf
∇

∇ R←PolyGen Rank;Seed;X;Polyos;Mat;Poly;Rotation1;Rotation2;Rotation3;Rotations;Reflections;Transformations
      ⍝ 2013 APL Problem Solving Competition stub function for Math/CompSci High Difficulty Problem
      ⍝ Solution by Christopher Zhang
      ⍝ Note that testing this algorithm for the maximum rank 8 takes a few times longer than Rank 7 but is still manageable ~5 seconds on a laptop
 Seed←(Rank)(Rank)⍴0 ⍝ Begin with a matrix of zeroes
 Seed[⌈Rank÷2;⌈Rank÷2]←1 ⍝ Initialize the middle element as 1 (for even ranks, it is slightly off-center but still suffices)
      ⍝ While at first it was efficient to initialize the top-left cell as 1, this would not return ALL free polyominoes such as the 5-cell cross (3 3 ⍴ 0 1 0 1 1 1)
 Seed←⊂Seed ⍝ Enclosing it is necessary because later Seed values will be a nested array of matrices
     
      ⍝ The basics of the algorithm involve creating all polyominos of a lower rank and then adding a cell to every possible neighbor
      ⍝ Iteration is only needed to control the amount of times the following steps are carried forth
 :For X :In ⍳(Rank-1) ⍝ For each rank minus the first
     Polyos←⍬
     :For Mat :In Seed
         Polyos,←(MatSplicer DeadNeighbors Mat)∨⊂Mat ⍝ Generate dead neighbors for each element of seed
              ⍝ The matrix-splicer helper function takes a matrix of n number of 1s and splits it into n matrices with only one 1 in each
     :EndFor
     Seed←Polyos
     Seed←((Seed⍳Seed)=⍳⍴Seed)/Seed ⍝ This step removes duplicates generated as soon as possible and reduces computation time
 :EndFor
      ⍝ Like the SimilarPoly function, remove any transformations of polyominoes
 Seed←{(∨\⍵∨.≠0)⌿⍵}¨Seed
 Seed←{(∨\0∨.≠⍵)/⍵}¨Seed
 Seed←{(-2↑+/∧\⌽⍵∧.=0)↓⍵}¨Seed
 Seed←{(⌽∨\⌽0∨.≠⍵)/⍵}¨Seed
 :For Poly :In Seed
     Rotation1←⌽⍉Poly
     Rotation2←⌽⍉Rotation1 ⍝ Rotating a rotation saves computation time of rotating repeatedly
     Rotation3←⌽⍉Rotation2
     Rotations←Poly Rotation1 Rotation2 Rotation3
     Reflections←(⌽Poly)(⊖Poly)(⍉Poly)(⊖⌽⍉Poly) ⍝ Every rotation can be reflected to a maximum of four unique reflections
     Transformations←Rotations,Reflections
     Seed←Seed~Transformations
     Seed,←⊂Poly
 :EndFor
 R←Seed
∇

∇ R←PopD Matrix;SizeArea;PadMat;NeighborsAndSelf;SumOfNeighborsAndSelf;NBCount;PadNB;NumNeighbors
      ⍝ A helper function by Christopher Zhang
      ⍝ Returns population density for each element of a matrix representing an island
     
 SizeArea←7 ⍝ Size of square subsections used for calculation
 PadMat←((2×SizeArea)+⍴Matrix)↑Matrix ⍝ Pad matrix
 PadMat←(-SizeArea)⌽PadMat ⍝ Center matrix horizontally
 PadMat←(-SizeArea)⊖PadMat ⍝ Center matrix vertically
 NeighborsAndSelf←((⌽⍳(SizeArea-1)÷2),0,(-⍳(SizeArea-1)÷2))∘.⊖(((⌽⍳(SizeArea-1)÷2),0,(-⍳(SizeArea-1)÷2))⌽¨⊂PadMat) ⍝ Shift individual matrices so that the same position in each matrix will be within its subsection
 SumOfNeighborsAndSelf←SizeArea(-SizeArea)↓((-SizeArea)SizeArea↓⊃+/,NeighborsAndSelf)
     
 NBCount←(⍴Matrix)⍴1
 PadNB←((2×SizeArea)+⍴Matrix)↑NBCount
 PadNB←(-SizeArea)⌽PadNB
 PadNB←(-SizeArea)⊖PadNB
 NumNeighbors←SizeArea(-SizeArea)↓(-SizeArea)SizeArea↓⊃+/,(((⌽⍳(SizeArea-1)÷2),0,(-⍳(SizeArea-1)÷2))∘.⊖(((⌽⍳(SizeArea-1)÷2),0,(-⍳(SizeArea-1)÷2))⌽¨⊂PadNB))
     
     
 R←SumOfNeighborsAndSelf÷NumNeighbors
∇

∇ r←gen PredPrey(Neq N R P S C);Temp;New
      ⍝ 2013 APL Problem Solving Competition stub function for Biology Medium Difficulty Problem 1
      ⍝ Solution by Christopher Zhang
     
      ⍝ A recursive algorithm that uses the last column to perform required operations
      ⍝ Note a simple :Trap can be included to guard against populations exploding beyond the limits of APL's number representation
         ⍝ However, this was only declared necessary in the earlier function NextGen
     
 :If (gen<2)  ⍝ Base case in recursion is the first generation
     r←2 1⍴N P ⍝ The base case simply returns the input values
 :Else
     Temp←(gen-1)PredPrey(Neq N R P S C) ⍝ Store the result of recursion as a variable (it is used twice and it would be silly to have double recursion)
     N P←Temp[;(⍴Temp)[2]]
     New←((1-((R-1)÷Neq)×N-Neq)×N)-C×N×P ⍝ Follow the mathematical model
     New←New,(S÷Neq)×N×P
     r←Temp,[2]New
 :EndIf
∇

∇ r←p1 SimilarPoly p2;Poly1;Poly2;Rotation1;Rotation2;Rotation3;Rotations;Reflections;Transformations;SameShapeIndices;SameShapeMats
     
      ⍝ 2013 APL Problem Solving Competition stub function for Math/CompSci Low Difficulty Problem
      ⍝ Solution by Christopher Zhang
     
 Poly1←(∨\0∨.≠p1)/p1 ⍝ Remove leading blank columns
 Poly1←(⌽∨\⌽0∨.≠Poly1)/Poly1 ⍝ Remove trailing blank columns
 Poly1←(∨\Poly1∨.≠0)⌿Poly1 ⍝ Remove leading blank rows
 Poly1←(-2↑+/∧\⌽Poly1∧.=0)↓Poly1 ⍝ Remove trailing blank rows
     
 Poly2←(∨\0∨.≠p2)/p2 ⍝ Remove leading blank columns
 Poly2←(⌽∨\⌽0∨.≠Poly2)/Poly2 ⍝ Remove trailing blank columns
 Poly2←(∨\Poly2∨.≠0)⌿Poly2 ⍝ Remove leading blank rows
 Poly2←(-2↑+/∧\⌽Poly2∧.=0)↓Poly2 ⍝ Remove trailing blank rows
     
 Rotation1←⌽⍉Poly2
 Rotation2←⌽⍉Rotation1 ⍝ Rotating a rotation optimizes computation time of rotating repeatedly
 Rotation3←⌽⍉Rotation2
 Rotations←Poly2 Rotation1 Rotation2 Rotation3
     
 Reflections←(⌽Poly2)(⊖Poly2)(⍉Poly2)(⊖⌽⍉Poly2) ⍝ Every rotation can be reflected to a maximum of four unique reflections
     
 Transformations←Rotations,Reflections
     
 SameShapeIndices←(⍴¨Transformations)=(8⍴⊂(⍴Poly1)) ⍝ Find all transformations of the same shape (and therefore be comparable) to Poly1
 SameShapeMats←(∧/¨SameShapeIndices)/Transformations
     
 r←(⊂Poly1)∊SameShapeMats ⍝ Check if the first Poly1 can be expressed as a transformation of the second
∇

∇ r←ValidPoly p;PixelHeight;PixelWidth;IndicesMat;Input;Cells;Left;Top;CellsWithLeftNeighbs;CellsWithTopNeighbs;CellsWithTopAndLeftNeighbs;CellsWithOnlyLeftNeighbs;CellsWithOnlyTopNeighbs;CellsWithNoTopLeftNeighbs;Globs;Cell
     
      ⍝ 2013 APL Problem Solving Competition stub function for Math/CompSci Medium Difficulty Problem
      ⍝ Solution by Christopher Zhang
     
 PixelHeight PixelWidth←⍴p ⍝ Store the shape of the input
      ⍝ The algorithm to be used is an APL adaption of the Two-Pass in connected-component labeling
         ⍝ Inspiration: http://www.cse.msu.edu/~stockman/Book/2002/Chapters/ch3.pdf
         ⍝ It was chosen for its speed (needing to visit every element of the matrix only twice)
         ⍝ The idea of checking if every live cell has a live neighbor was discarded as it did not account for multiple polyominoes in one matrix
         ⍝ Polyominoes are connected edge-to-edge so the 4-connectivity (north, south, east, west) is used
      ⍝ Because it relies on neighbors, indicate each 1 cell by its location: its index in the raveled vector of the matrix
      ⍝ A left neighbor of a particular index, for example, would be index - 1.
      ⍝ Warning! To avoid considering the first member of that row a neighbor of the last cell in the previous row, add padding
 PixelWidth+←1 ⍝ Add padding
 IndicesMat←PixelHeight PixelWidth⍴⍳((PixelWidth)×PixelHeight) ⍝ If the size of the input is a 10 by 10 matrix and a column is padded to the right, the index of each cell is 1...110 or (10 × 11)
 Input←p ⍝ Avoid side-effects on the input
 Input,[2]←0 ⍝ Catenate a column of zeroes to the right
 IndicesMat∧←Input ⍝ By performing the binary operation AND, any unoccupied cell will become a zero and any occupied 1 cell will become its index
 Cells←(,IndicesMat)~0 ⍝ Ravel the matrix and remove the zeroes that resulted from empty cells
      ⍝ What is stored in cells is now a list of indices for each 1 cell
 Left←Cells-1 ⍝ Generate possible left neighbors for each 1 cell
 Top←Cells-PixelWidth ⍝ Generate possible top neighbors for each 1 cell
     
 CellsWithLeftNeighbs←(Left∊Cells)/Cells ⍝ If a left neighbor exists for a cell, then this is a cell with a left neighbor
 CellsWithTopNeighbs←(Top∊Cells)/Cells ⍝ Repeat for top neighbors
     
      ⍝ The algorithm requires different actions to be taken per cell depending on the following
      ⍝ Variable names provide adequate information
 CellsWithTopAndLeftNeighbs←CellsWithLeftNeighbs∩CellsWithTopNeighbs
 CellsWithOnlyLeftNeighbs←CellsWithLeftNeighbs~CellsWithTopNeighbs
 CellsWithOnlyTopNeighbs←CellsWithTopNeighbs~CellsWithLeftNeighbs
 CellsWithNoTopLeftNeighbs←Cells~(CellsWithTopAndLeftNeighbs∪CellsWithTopNeighbs∪CellsWithLeftNeighbs)
     
 Globs←(⍴Cells)⍴0 ⍝ Initialize this variable, which is a vector of labels for each occupied cell
 Globs[Cells⍳CellsWithNoTopLeftNeighbs]←⍳⍴CellsWithNoTopLeftNeighbs ⍝ Every cell with no top and left neighbor is given a unique label (in this case, as many natural numbers as needed)
     
      ⍝ Note: Iteration is often avoidable in APL but the manner of the algorithm relies on data that is crunched just before or after in a specific way
 :For Cell :In Cells
     :If Cell∊CellsWithOnlyLeftNeighbs ⍝ When the cell only has a left neighbor, give that cell the same label as its left neighbor
         Globs[Cells⍳Cell]←Globs[(Cells⍳Cell)-1]
     :ElseIf Cell∊CellsWithOnlyTopNeighbs ⍝ Repeat for only top neighbors
         Globs[Cells⍳Cell]←Globs[Cells⍳(Cell-PixelWidth)]
     :ElseIf Cell∊CellsWithTopAndLeftNeighbs ⍝ When a cell has a top and a left neighbor, simply give it the label of its left neighbor
         :If Globs[(Cells⍳Cell)-1]≠Globs[Cells⍳(Cell-PixelWidth)] ⍝ However, if the top and left neighbors have different labels, these labels are known to relate to the same connected polyomino
             Globs[Cells⍳Cell]←Globs[(Cells⍳Cell)-1]⌊Globs[Cells⍳(Cell-PixelWidth)]
             Globs[(Globs=Globs[Cells⍳(Cell-PixelWidth)]⌈Globs[Cells⍳Cell]←Globs[(Cells⍳Cell)-1])/⍳⍴Globs]←Globs[Cells⍳Cell]⍝Set all instances of one label to the other label because they are equivalent
         :Else
             Globs[Cells⍳Cell]←Globs[(Cells⍳Cell)-1] ⍝ If the top and left labels are the same, set it to the left
         :EndIf
     :EndIf
 :EndFor
 r←∧/Globs=Globs[1] ⍝ Return whether there is only one glob (a connected area with one label)
∇

∇ (tiks mat)←height chart1Series data;range;min;max;scale;scaled;tikvalues;mask
     ⍝ Return tik values and boolean matrix for charting a series
     ⍝    Sub-function of Chart
     
 max←⌈/data ⋄ min←⌊/data    ⍝ What it says
 range←max-min              ⍝ Ditto
 scale←height÷range+range=0 ⍝ If range is 0, pretend it is 1
     
 scaled←⌊0.5+scale×data-min
 mat←(height,height-⍳height)∘.=scaled
     
 tikvalues←max,(⌊0.5+0.5×max+min),min
 mask←(0,⍳height)∊0,height,⌊0.5+height÷2
 tiks←(mask⍀0 2⍕⍪tikvalues),'|-'[1+mask]
∇

:EndNamespace 
:EndNamespace 